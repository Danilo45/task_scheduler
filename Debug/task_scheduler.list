
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001198  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001320  08001320  00002320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001368  08001368  00003060  2**0
                  CONTENTS
  4 .ARM          00000000  08001368  08001368  00003060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001368  08001368  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001368  08001368  00002368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800136c  0800136c  0000236c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001370  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          000001c0  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00003060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e16  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005b0  00000000  00000000  00003ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  00004458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000169  00000000  00000000  00004658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e0a  00000000  00000000  000047c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cae  00000000  00000000  000075cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009e05  00000000  00000000  00009279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001307e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d28  00000000  00000000  000130c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00013dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001308 	.word	0x08001308

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08001308 	.word	0x08001308

080001c8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ce:	4b19      	ldr	r3, [pc, #100]	@ (8000234 <led_init_all+0x6c>)
 80001d0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001d2:	4b19      	ldr	r3, [pc, #100]	@ (8000238 <led_init_all+0x70>)
 80001d4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f043 0208 	orr.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000212:	200c      	movs	r0, #12
 8000214:	f000 f82a 	bl	800026c <led_off>
    led_off(LED_ORANGE);
 8000218:	200d      	movs	r0, #13
 800021a:	f000 f827 	bl	800026c <led_off>
    led_off(LED_RED);
 800021e:	200e      	movs	r0, #14
 8000220:	f000 f824 	bl	800026c <led_off>
    led_off(LED_BLUE);
 8000224:	200f      	movs	r0, #15
 8000226:	f000 f821 	bl	800026c <led_off>



}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40023830 	.word	0x40023830
 8000238:	40020c00 	.word	0x40020c00

0800023c <led_on>:

void led_on(uint8_t led_no)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000246:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <led_on+0x2c>)
 8000248:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	79fa      	ldrb	r2, [r7, #7]
 8000250:	2101      	movs	r1, #1
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	431a      	orrs	r2, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	601a      	str	r2, [r3, #0]

}
 800025c:	bf00      	nop
 800025e:	3714      	adds	r7, #20
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr
 8000268:	40020c14 	.word	0x40020c14

0800026c <led_off>:

void led_off(uint8_t led_no)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000276:	4b09      	ldr	r3, [pc, #36]	@ (800029c <led_off+0x30>)
 8000278:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	2101      	movs	r1, #1
 8000282:	fa01 f202 	lsl.w	r2, r1, r2
 8000286:	43d2      	mvns	r2, r2
 8000288:	401a      	ands	r2, r3
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]

}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40020c14 	.word	0x40020c14

080002a0 <main>:
}TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	enable_processor_faults();//da ne bismo memoriji pristupali ilegalno da ne bude fault
 80002a4:	f000 f926 	bl	80004f4 <enable_processor_faults>

	init_scheduler_stack(SCHEDULER_STACK_START);
 80002a8:	4808      	ldr	r0, [pc, #32]	@ (80002cc <main+0x2c>)
 80002aa:	f000 f88f 	bl	80003cc <init_scheduler_stack>

	init_task_stack();
 80002ae:	f000 f893 	bl	80003d8 <init_task_stack>

	led_init_all();
 80002b2:	f7ff ff89 	bl	80001c8 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ba:	f000 f851 	bl	8000360 <init_systick_timer>
	//moram promijeniti sa MSP (dosad) na PSP (odsad)
	switch_sp_to_psp();
 80002be:	f000 f9a9 	bl	8000614 <switch_sp_to_psp>
	task1_handler();
 80002c2:	f000 f809 	bl	80002d8 <task1_handler>
    /* Loop forever */
	for(;;);
 80002c6:	bf00      	nop
 80002c8:	e7fd      	b.n	80002c6 <main+0x26>
 80002ca:	bf00      	nop
 80002cc:	2001ec00 	.word	0x2001ec00

080002d0 <idle_task>:
}

void idle_task(void){
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	while(1);
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <idle_task+0x4>

080002d8 <task1_handler>:
}

void task1_handler(void){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_GREEN);
 80002dc:	200c      	movs	r0, #12
 80002de:	f7ff ffad 	bl	800023c <led_on>
		task_delay(1000);
 80002e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002e6:	f000 f9b7 	bl	8000658 <task_delay>
		led_off(LED_GREEN);
 80002ea:	200c      	movs	r0, #12
 80002ec:	f7ff ffbe 	bl	800026c <led_off>
		task_delay(1000);
 80002f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002f4:	f000 f9b0 	bl	8000658 <task_delay>
		led_on(LED_GREEN);
 80002f8:	bf00      	nop
 80002fa:	e7ef      	b.n	80002dc <task1_handler+0x4>

080002fc <task2_handler>:
}

}
void task2_handler(void){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_ORANGE);
 8000300:	200d      	movs	r0, #13
 8000302:	f7ff ff9b 	bl	800023c <led_on>
		task_delay(500);
 8000306:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800030a:	f000 f9a5 	bl	8000658 <task_delay>
		led_off(LED_ORANGE);
 800030e:	200d      	movs	r0, #13
 8000310:	f7ff ffac 	bl	800026c <led_off>
		task_delay(500);
 8000314:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000318:	f000 f99e 	bl	8000658 <task_delay>
		led_on(LED_ORANGE);
 800031c:	bf00      	nop
 800031e:	e7ef      	b.n	8000300 <task2_handler+0x4>

08000320 <task3_handler>:
	}
}
void task3_handler(void){
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_BLUE);
 8000324:	200f      	movs	r0, #15
 8000326:	f7ff ff89 	bl	800023c <led_on>
		task_delay(250);
 800032a:	20fa      	movs	r0, #250	@ 0xfa
 800032c:	f000 f994 	bl	8000658 <task_delay>
		led_off(LED_BLUE);
 8000330:	200f      	movs	r0, #15
 8000332:	f7ff ff9b 	bl	800026c <led_off>
		task_delay(250);	}
 8000336:	20fa      	movs	r0, #250	@ 0xfa
 8000338:	f000 f98e 	bl	8000658 <task_delay>
		led_on(LED_BLUE);
 800033c:	bf00      	nop
 800033e:	e7f1      	b.n	8000324 <task3_handler+0x4>

08000340 <task4_handler>:
}
void task4_handler(void){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_RED);
 8000344:	200e      	movs	r0, #14
 8000346:	f7ff ff79 	bl	800023c <led_on>
		task_delay(125);
 800034a:	207d      	movs	r0, #125	@ 0x7d
 800034c:	f000 f984 	bl	8000658 <task_delay>
		led_off(LED_RED);
 8000350:	200e      	movs	r0, #14
 8000352:	f7ff ff8b 	bl	800026c <led_off>
		task_delay(125);
 8000356:	207d      	movs	r0, #125	@ 0x7d
 8000358:	f000 f97e 	bl	8000658 <task_delay>
		led_on(LED_RED);
 800035c:	bf00      	nop
 800035e:	e7f1      	b.n	8000344 <task4_handler+0x4>

08000360 <init_systick_timer>:
	}
}


void init_systick_timer(uint32_t tick_hz){
 8000360:	b480      	push	{r7}
 8000362:	b087      	sub	sp, #28
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000368:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <init_systick_timer+0x60>)
 800036a:	617b      	str	r3, [r7, #20]
	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 800036c:	4a15      	ldr	r2, [pc, #84]	@ (80003c4 <init_systick_timer+0x64>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	fbb2 f3f3 	udiv	r3, r2, r3
 8000374:	3b01      	subs	r3, #1
 8000376:	613b      	str	r3, [r7, #16]
	//clear value in SRVR
	*pSRVR &= ~(0x00FFFFFFFF);
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
	//load value in SRVR
	*pSRVR |= count_value;
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	693b      	ldr	r3, [r7, #16]
 8000384:	431a      	orrs	r2, r3
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	601a      	str	r2, [r3, #0]
	//do some settings
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <init_systick_timer+0x68>)
 800038c:	60fb      	str	r3, [r7, #12]
	*pSCSR |= 1<<1; // enable tickint for exception
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f043 0202 	orr.w	r2, r3, #2
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	601a      	str	r2, [r3, #0]
	*pSCSR |= 1<<2; // enable the processor's clock
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f043 0204 	orr.w	r2, r3, #4
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	601a      	str	r2, [r3, #0]
	//enable systick
	*pSCSR |= 1; //enalbe the counter
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f043 0201 	orr.w	r2, r3, #1
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	601a      	str	r2, [r3, #0]
}
 80003b2:	bf00      	nop
 80003b4:	371c      	adds	r7, #28
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	e000e014 	.word	0xe000e014
 80003c4:	00f42400 	.word	0x00f42400
 80003c8:	e000e010 	.word	0xe000e010

080003cc <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_top_of_stack){
 80003cc:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": :"r"(scheduler_top_of_stack):);
 80003ce:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80003d2:	4770      	bx	lr
}
 80003d4:	bf00      	nop
	...

080003d8 <init_task_stack>:


void init_task_stack(void){
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
	user_tasks[0].current_state = TASK_READY_STATE;
 80003de:	4b3a      	ldr	r3, [pc, #232]	@ (80004c8 <init_task_stack+0xf0>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 80003e4:	4b38      	ldr	r3, [pc, #224]	@ (80004c8 <init_task_stack+0xf0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 80003ea:	4b37      	ldr	r3, [pc, #220]	@ (80004c8 <init_task_stack+0xf0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 80003f2:	4b35      	ldr	r3, [pc, #212]	@ (80004c8 <init_task_stack+0xf0>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 80003fa:	4b33      	ldr	r3, [pc, #204]	@ (80004c8 <init_task_stack+0xf0>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000402:	4b31      	ldr	r3, [pc, #196]	@ (80004c8 <init_task_stack+0xf0>)
 8000404:	4a31      	ldr	r2, [pc, #196]	@ (80004cc <init_task_stack+0xf4>)
 8000406:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000408:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <init_task_stack+0xf0>)
 800040a:	4a31      	ldr	r2, [pc, #196]	@ (80004d0 <init_task_stack+0xf8>)
 800040c:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 800040e:	4b2e      	ldr	r3, [pc, #184]	@ (80004c8 <init_task_stack+0xf0>)
 8000410:	4a30      	ldr	r2, [pc, #192]	@ (80004d4 <init_task_stack+0xfc>)
 8000412:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000414:	4b2c      	ldr	r3, [pc, #176]	@ (80004c8 <init_task_stack+0xf0>)
 8000416:	4a30      	ldr	r2, [pc, #192]	@ (80004d8 <init_task_stack+0x100>)
 8000418:	631a      	str	r2, [r3, #48]	@ 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 800041a:	4b2b      	ldr	r3, [pc, #172]	@ (80004c8 <init_task_stack+0xf0>)
 800041c:	4a2f      	ldr	r2, [pc, #188]	@ (80004dc <init_task_stack+0x104>)
 800041e:	641a      	str	r2, [r3, #64]	@ 0x40


	user_tasks[0].task_handler = idle_task;
 8000420:	4b29      	ldr	r3, [pc, #164]	@ (80004c8 <init_task_stack+0xf0>)
 8000422:	4a2f      	ldr	r2, [pc, #188]	@ (80004e0 <init_task_stack+0x108>)
 8000424:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 8000426:	4b28      	ldr	r3, [pc, #160]	@ (80004c8 <init_task_stack+0xf0>)
 8000428:	4a2e      	ldr	r2, [pc, #184]	@ (80004e4 <init_task_stack+0x10c>)
 800042a:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 800042c:	4b26      	ldr	r3, [pc, #152]	@ (80004c8 <init_task_stack+0xf0>)
 800042e:	4a2e      	ldr	r2, [pc, #184]	@ (80004e8 <init_task_stack+0x110>)
 8000430:	62da      	str	r2, [r3, #44]	@ 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000432:	4b25      	ldr	r3, [pc, #148]	@ (80004c8 <init_task_stack+0xf0>)
 8000434:	4a2d      	ldr	r2, [pc, #180]	@ (80004ec <init_task_stack+0x114>)
 8000436:	63da      	str	r2, [r3, #60]	@ 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000438:	4b23      	ldr	r3, [pc, #140]	@ (80004c8 <init_task_stack+0xf0>)
 800043a:	4a2d      	ldr	r2, [pc, #180]	@ (80004f0 <init_task_stack+0x118>)
 800043c:	64da      	str	r2, [r3, #76]	@ 0x4c

	uint32_t *pPSP;
	//ovdje cu za svaku iteraciju popuniti dummy frame za svaki task
	for(int i=0; i< MAX_TASKS; i++){
 800043e:	2300      	movs	r3, #0
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	e037      	b.n	80004b4 <init_task_stack+0xdc>
		pPSP = (uint32_t*)user_tasks[i].psp_value; // a pspoftasks je niz adresa taskova 1 2 3 4
 8000444:	4a20      	ldr	r2, [pc, #128]	@ (80004c8 <init_task_stack+0xf0>)
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	011b      	lsls	r3, r3, #4
 800044a:	4413      	add	r3, r2
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	60fb      	str	r3, [r7, #12]
		pPSP--;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	3b04      	subs	r3, #4
 8000454:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //xPSR
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800045c:	601a      	str	r2, [r3, #0]
		pPSP--;
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	3b04      	subs	r3, #4
 8000462:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)user_tasks[i].task_handler; //PC, task_hanledr[0] je task handler1 njegova fja
 8000464:	4a18      	ldr	r2, [pc, #96]	@ (80004c8 <init_task_stack+0xf0>)
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	011b      	lsls	r3, r3, #4
 800046a:	4413      	add	r3, r2
 800046c:	330c      	adds	r3, #12
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	601a      	str	r2, [r3, #0]
		pPSP--;
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	3b04      	subs	r3, #4
 800047a:	60fb      	str	r3, [r7, #12]
		*pPSP = 0XFFFFFFFD; //LR
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f06f 0202 	mvn.w	r2, #2
 8000482:	601a      	str	r2, [r3, #0]
		//ovo ispod su sve ostale koje mogu biti 0, ukupno 13 njih
		for(int j = 0; j<13; j++){
 8000484:	2300      	movs	r3, #0
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	e008      	b.n	800049c <init_task_stack+0xc4>
			pPSP--;
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	3b04      	subs	r3, #4
 800048e:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
		for(int j = 0; j<13; j++){
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3301      	adds	r3, #1
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b0c      	cmp	r3, #12
 80004a0:	ddf3      	ble.n	800048a <init_task_stack+0xb2>
		}
		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	4908      	ldr	r1, [pc, #32]	@ (80004c8 <init_task_stack+0xf0>)
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	011b      	lsls	r3, r3, #4
 80004aa:	440b      	add	r3, r1
 80004ac:	601a      	str	r2, [r3, #0]
	for(int i=0; i< MAX_TASKS; i++){
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	3301      	adds	r3, #1
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	2b04      	cmp	r3, #4
 80004b8:	ddc4      	ble.n	8000444 <init_task_stack+0x6c>
	}
}
 80004ba:	bf00      	nop
 80004bc:	bf00      	nop
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	20000080 	.word	0x20000080
 80004cc:	2001f000 	.word	0x2001f000
 80004d0:	20020000 	.word	0x20020000
 80004d4:	2001fc00 	.word	0x2001fc00
 80004d8:	2001f800 	.word	0x2001f800
 80004dc:	2001f400 	.word	0x2001f400
 80004e0:	080002d1 	.word	0x080002d1
 80004e4:	080002d9 	.word	0x080002d9
 80004e8:	080002fd 	.word	0x080002fd
 80004ec:	08000321 	.word	0x08000321
 80004f0:	08000341 	.word	0x08000341

080004f4 <enable_processor_faults>:

void enable_processor_faults(void){
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80004fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000530 <enable_processor_faults+0x3c>)
 80004fc:	607b      	str	r3, [r7, #4]
	*pSHCSR |= (1<<16);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<17);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<18);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	601a      	str	r2, [r3, #0]

}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000ed24 	.word	0xe000ed24

08000534 <get_psp_value>:

uint32_t get_psp_value(){
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value; //return value iz callee je uvijek smjestana u r0
 8000538:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <get_psp_value+0x1c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4a05      	ldr	r2, [pc, #20]	@ (8000554 <get_psp_value+0x20>)
 800053e:	011b      	lsls	r3, r3, #4
 8000540:	4413      	add	r3, r2
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000000 	.word	0x20000000
 8000554:	20000080 	.word	0x20000080

08000558 <save_psp_value>:

uint32_t save_psp_value(uint32_t current_psp){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	return user_tasks[current_task].psp_value = current_psp;
 8000560:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <save_psp_value+0x2c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4908      	ldr	r1, [pc, #32]	@ (8000588 <save_psp_value+0x30>)
 8000566:	011a      	lsls	r2, r3, #4
 8000568:	440a      	add	r2, r1
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	6011      	str	r1, [r2, #0]
 800056e:	4a06      	ldr	r2, [pc, #24]	@ (8000588 <save_psp_value+0x30>)
 8000570:	011b      	lsls	r3, r3, #4
 8000572:	4413      	add	r3, r2
 8000574:	681b      	ldr	r3, [r3, #0]
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000000 	.word	0x20000000
 8000588:	20000080 	.word	0x20000080

0800058c <update_next_task>:

void update_next_task(void){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKER_STATE;
 8000592:	23ff      	movs	r3, #255	@ 0xff
 8000594:	607b      	str	r3, [r7, #4]
	for(int i=0; i<MAX_TASKS; i++){
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	e024      	b.n	80005e6 <update_next_task+0x5a>
		current_task++;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <update_next_task+0x7c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <update_next_task+0x7c>)
 80005a6:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASKS;
 80005a8:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <update_next_task+0x7c>)
 80005aa:	781a      	ldrb	r2, [r3, #0]
 80005ac:	4b17      	ldr	r3, [pc, #92]	@ (800060c <update_next_task+0x80>)
 80005ae:	fba3 1302 	umull	r1, r3, r3, r2
 80005b2:	0899      	lsrs	r1, r3, #2
 80005b4:	460b      	mov	r3, r1
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	440b      	add	r3, r1
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <update_next_task+0x7c>)
 80005c0:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <update_next_task+0x7c>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	4a12      	ldr	r2, [pc, #72]	@ (8000610 <update_next_task+0x84>)
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	4413      	add	r3, r2
 80005cc:	3308      	adds	r3, #8
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	607b      	str	r3, [r7, #4]
		if((state == TASK_READY_STATE) && (current_task != 0)){
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d103      	bne.n	80005e0 <update_next_task+0x54>
 80005d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <update_next_task+0x7c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d106      	bne.n	80005ee <update_next_task+0x62>
	for(int i=0; i<MAX_TASKS; i++){
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	3301      	adds	r3, #1
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	ddd7      	ble.n	800059c <update_next_task+0x10>
 80005ec:	e000      	b.n	80005f0 <update_next_task+0x64>
			break;
 80005ee:	bf00      	nop
		}
	}
	if(state != TASK_READY_STATE){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d002      	beq.n	80005fc <update_next_task+0x70>
		current_task = 0;
 80005f6:	4b04      	ldr	r3, [pc, #16]	@ (8000608 <update_next_task+0x7c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
	}

}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	20000000 	.word	0x20000000
 800060c:	cccccccd 	.word	0xcccccccd
 8000610:	20000080 	.word	0x20000080

08000614 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	//prvo uvijek inicijalizacija psp sa task1 start stack address
	//get value of current_task
	__asm volatile("PUSH {LR}");
 8000614:	b500      	push	{lr}
	__asm volatile("BL get_psp_value"); // BL zato sto se vracamo posle u ovo funkciju!
 8000616:	f7ff ff8d 	bl	8000534 <get_psp_value>
	__asm volatile("MSR PSP, R0");
 800061a:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 800061e:	f85d eb04 	ldr.w	lr, [sp], #4
	//promijeni sp to psp pomocu control registra
	__asm volatile("MOV R0, 0x02");
 8000622:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 8000626:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 800062a:	4770      	bx	lr
}
 800062c:	bf00      	nop
	...

08000630 <schedule>:

void schedule(void){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <schedule+0x24>)
 8000638:	607b      	str	r3, [r7, #4]
	*pICSR |= 1<<28; //pend the pendsv exception
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	601a      	str	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000ed04 	.word	0xe000ed04

08000658 <task_delay>:


void task_delay(uint32_t tick_count){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

	INTERUPT_DISABLE();
 8000660:	f04f 0001 	mov.w	r0, #1
 8000664:	f380 8810 	msr	PRIMASK, r0
	if(current_task){ //ako je current task 0 onda je idle i ne treba ga dirati, zato ovo radimo samo ako nije 0
 8000668:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <task_delay+0x54>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d015      	beq.n	800069c <task_delay+0x44>
		user_tasks[current_task].block_count = g_tick_count + tick_count;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <task_delay+0x58>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <task_delay+0x54>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	441a      	add	r2, r3
 800067e:	490d      	ldr	r1, [pc, #52]	@ (80006b4 <task_delay+0x5c>)
 8000680:	0103      	lsls	r3, r0, #4
 8000682:	440b      	add	r3, r1
 8000684:	3304      	adds	r3, #4
 8000686:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKER_STATE;
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <task_delay+0x54>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4a09      	ldr	r2, [pc, #36]	@ (80006b4 <task_delay+0x5c>)
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	4413      	add	r3, r2
 8000692:	3308      	adds	r3, #8
 8000694:	22ff      	movs	r2, #255	@ 0xff
 8000696:	701a      	strb	r2, [r3, #0]
		schedule(); // allow other tasks to run by triggering pendsv here
 8000698:	f7ff ffca 	bl	8000630 <schedule>
	}

	INTERUPT_ENABLE();
 800069c:	f04f 0000 	mov.w	r0, #0
 80006a0:	f380 8810 	msr	PRIMASK, r0
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000000 	.word	0x20000000
 80006b0:	2000007c 	.word	0x2000007c
 80006b4:	20000080 	.word	0x20000080

080006b8 <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void){
	//save the context of current task

	//1. get current running task's PSP value
	__asm volatile("MRS R0, PSP");
 80006b8:	f3ef 8009 	mrs	r0, PSP
	//2.using that PSP value store SF2(R4 to R11)
	__asm volatile("STMDB R0!, {R4 - R11}");   //decrement before, imitation of push in handlers
 80006bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("PUSH {LR}");
 80006c0:	b500      	push	{lr}

	//3. Save the current value of PSP
	__asm volatile("BL save_psp_value");
 80006c2:	f7ff ff49 	bl	8000558 <save_psp_value>

	//retrieve the context of next  task

	//1. Decide the next task
	__asm volatile("BL update_next_task");
 80006c6:	f7ff ff61 	bl	800058c <update_next_task>
	//2. get it's past psp value

	__asm volatile("BL get_psp_value");
 80006ca:	f7ff ff33 	bl	8000534 <get_psp_value>
	//3. Using that psp value retrieve SF2(r4-r11)
	__asm volatile("LDMIA R0!, {R4-R11}");  //! je da bih update R0 pokazivac, kad god je load
 80006ce:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//4.update PSP and exit
	__asm volatile("MSR PSP, R0");
 80006d2:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 80006d6:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 80006da:	4770      	bx	lr
}
 80006dc:	bf00      	nop
	...

080006e0 <update_global_tick_count>:

void update_global_tick_count(void){
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
	g_tick_count++;
 80006e4:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <update_global_tick_count+0x18>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	4a03      	ldr	r2, [pc, #12]	@ (80006f8 <update_global_tick_count+0x18>)
 80006ec:	6013      	str	r3, [r2, #0]
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	2000007c 	.word	0x2000007c

080006fc <unblock_tasks>:

void unblock_tasks(void){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
	for(int i=1; i<MAX_TASKS; i++){ //i polazi od 1 zato sto je idle (0) uvijek running
 8000702:	2301      	movs	r3, #1
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	e01b      	b.n	8000740 <unblock_tasks+0x44>
		if(user_tasks[i].current_state != TASK_READY_STATE){
 8000708:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <unblock_tasks+0x58>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	011b      	lsls	r3, r3, #4
 800070e:	4413      	add	r3, r2
 8000710:	3308      	adds	r3, #8
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d010      	beq.n	800073a <unblock_tasks+0x3e>
			if(user_tasks[i].block_count == g_tick_count){
 8000718:	4a0e      	ldr	r2, [pc, #56]	@ (8000754 <unblock_tasks+0x58>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	011b      	lsls	r3, r3, #4
 800071e:	4413      	add	r3, r2
 8000720:	3304      	adds	r3, #4
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <unblock_tasks+0x5c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	429a      	cmp	r2, r3
 800072a:	d106      	bne.n	800073a <unblock_tasks+0x3e>
				user_tasks[i].current_state = TASK_READY_STATE;
 800072c:	4a09      	ldr	r2, [pc, #36]	@ (8000754 <unblock_tasks+0x58>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	4413      	add	r3, r2
 8000734:	3308      	adds	r3, #8
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<MAX_TASKS; i++){ //i polazi od 1 zato sto je idle (0) uvijek running
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3301      	adds	r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b04      	cmp	r3, #4
 8000744:	dde0      	ble.n	8000708 <unblock_tasks+0xc>
			}
		}
	}
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	20000080 	.word	0x20000080
 8000758:	2000007c 	.word	0x2000007c

0800075c <SysTick_Handler>:

void SysTick_Handler(void){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <SysTick_Handler+0x28>)
 8000764:	607b      	str	r3, [r7, #4]
	*pICSR |= 1<<28; //pend the pendsv exception
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	601a      	str	r2, [r3, #0]
	update_global_tick_count();
 8000772:	f7ff ffb5 	bl	80006e0 <update_global_tick_count>
	unblock_tasks();
 8000776:	f7ff ffc1 	bl	80006fc <unblock_tasks>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000ed04 	.word	0xe000ed04

08000788 <HardFault_Handler>:

//fault handlers:
void HardFault_Handler(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	printf("Exception: Hard Fault\n");
 800078c:	4802      	ldr	r0, [pc, #8]	@ (8000798 <HardFault_Handler+0x10>)
 800078e:	f000 fa27 	bl	8000be0 <puts>
	while(1);
 8000792:	bf00      	nop
 8000794:	e7fd      	b.n	8000792 <HardFault_Handler+0xa>
 8000796:	bf00      	nop
 8000798:	08001320 	.word	0x08001320

0800079c <MemManage_Handler>:
}

void MemManage_Handler(void){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	printf("Exception: Mem Manage\n");
 80007a0:	4802      	ldr	r0, [pc, #8]	@ (80007ac <MemManage_Handler+0x10>)
 80007a2:	f000 fa1d 	bl	8000be0 <puts>
	while(1);
 80007a6:	bf00      	nop
 80007a8:	e7fd      	b.n	80007a6 <MemManage_Handler+0xa>
 80007aa:	bf00      	nop
 80007ac:	08001338 	.word	0x08001338

080007b0 <BusFault_Handler>:
}

void BusFault_Handler(void){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	printf("Exception: Bus fault\n");
 80007b4:	4802      	ldr	r0, [pc, #8]	@ (80007c0 <BusFault_Handler+0x10>)
 80007b6:	f000 fa13 	bl	8000be0 <puts>
	while(1);
 80007ba:	bf00      	nop
 80007bc:	e7fd      	b.n	80007ba <BusFault_Handler+0xa>
 80007be:	bf00      	nop
 80007c0:	08001350 	.word	0x08001350

080007c4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <ITM_SendChar+0x48>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a0e      	ldr	r2, [pc, #56]	@ (800080c <ITM_SendChar+0x48>)
 80007d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007d8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <ITM_SendChar+0x4c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a0c      	ldr	r2, [pc, #48]	@ (8000810 <ITM_SendChar+0x4c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007e6:	bf00      	nop
 80007e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f8      	beq.n	80007e8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007f6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	6013      	str	r3, [r2, #0]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000edfc 	.word	0xe000edfc
 8000810:	e0000e00 	.word	0xe0000e00

08000814 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	e00a      	b.n	800083c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000826:	f3af 8000 	nop.w
 800082a:	4601      	mov	r1, r0
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	60ba      	str	r2, [r7, #8]
 8000832:	b2ca      	uxtb	r2, r1
 8000834:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	3301      	adds	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	dbf0      	blt.n	8000826 <_read+0x12>
  }

  return len;
 8000844:	687b      	ldr	r3, [r7, #4]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	e009      	b.n	8000874 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	60ba      	str	r2, [r7, #8]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ffab 	bl	80007c4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbf1      	blt.n	8000860 <_write+0x12>
  }
  return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_close>:

int _close(int file)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008ae:	605a      	str	r2, [r3, #4]
  return 0;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <_isatty>:

int _isatty(int file)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f8:	4a14      	ldr	r2, [pc, #80]	@ (800094c <_sbrk+0x5c>)
 80008fa:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <_sbrk+0x60>)
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000904:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <_sbrk+0x64>)
 800090e:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <_sbrk+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	429a      	cmp	r2, r3
 800091e:	d207      	bcs.n	8000930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000920:	f000 fa8c 	bl	8000e3c <__errno>
 8000924:	4603      	mov	r3, r0
 8000926:	220c      	movs	r2, #12
 8000928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	e009      	b.n	8000944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000930:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000936:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <_sbrk+0x64>)
 8000940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20020000 	.word	0x20020000
 8000950:	00000400 	.word	0x00000400
 8000954:	200000d0 	.word	0x200000d0
 8000958:	20000220 	.word	0x20000220

0800095c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800095c:	480d      	ldr	r0, [pc, #52]	@ (8000994 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800095e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000960:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000964:	480c      	ldr	r0, [pc, #48]	@ (8000998 <LoopForever+0x6>)
  ldr r1, =_edata
 8000966:	490d      	ldr	r1, [pc, #52]	@ (800099c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <LoopForever+0xe>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800097c:	4c0a      	ldr	r4, [pc, #40]	@ (80009a8 <LoopForever+0x16>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800098a:	f000 fa5d 	bl	8000e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098e:	f7ff fc87 	bl	80002a0 <main>

08000992 <LoopForever>:

LoopForever:
  b LoopForever
 8000992:	e7fe      	b.n	8000992 <LoopForever>
  ldr   r0, =_estack
 8000994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009a0:	08001370 	.word	0x08001370
  ldr r2, =_sbss
 80009a4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009a8:	20000220 	.word	0x20000220

080009ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC_IRQHandler>
	...

080009b0 <std>:
 80009b0:	2300      	movs	r3, #0
 80009b2:	b510      	push	{r4, lr}
 80009b4:	4604      	mov	r4, r0
 80009b6:	e9c0 3300 	strd	r3, r3, [r0]
 80009ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009be:	6083      	str	r3, [r0, #8]
 80009c0:	8181      	strh	r1, [r0, #12]
 80009c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80009c4:	81c2      	strh	r2, [r0, #14]
 80009c6:	6183      	str	r3, [r0, #24]
 80009c8:	4619      	mov	r1, r3
 80009ca:	2208      	movs	r2, #8
 80009cc:	305c      	adds	r0, #92	@ 0x5c
 80009ce:	f000 f9e7 	bl	8000da0 <memset>
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <std+0x58>)
 80009d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <std+0x5c>)
 80009d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <std+0x60>)
 80009dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <std+0x64>)
 80009e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80009e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <std+0x68>)
 80009e4:	6224      	str	r4, [r4, #32]
 80009e6:	429c      	cmp	r4, r3
 80009e8:	d006      	beq.n	80009f8 <std+0x48>
 80009ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80009ee:	4294      	cmp	r4, r2
 80009f0:	d002      	beq.n	80009f8 <std+0x48>
 80009f2:	33d0      	adds	r3, #208	@ 0xd0
 80009f4:	429c      	cmp	r4, r3
 80009f6:	d105      	bne.n	8000a04 <std+0x54>
 80009f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80009fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a00:	f000 ba46 	b.w	8000e90 <__retarget_lock_init_recursive>
 8000a04:	bd10      	pop	{r4, pc}
 8000a06:	bf00      	nop
 8000a08:	08000bf1 	.word	0x08000bf1
 8000a0c:	08000c13 	.word	0x08000c13
 8000a10:	08000c4b 	.word	0x08000c4b
 8000a14:	08000c6f 	.word	0x08000c6f
 8000a18:	200000d4 	.word	0x200000d4

08000a1c <stdio_exit_handler>:
 8000a1c:	4a02      	ldr	r2, [pc, #8]	@ (8000a28 <stdio_exit_handler+0xc>)
 8000a1e:	4903      	ldr	r1, [pc, #12]	@ (8000a2c <stdio_exit_handler+0x10>)
 8000a20:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <stdio_exit_handler+0x14>)
 8000a22:	f000 b869 	b.w	8000af8 <_fwalk_sglue>
 8000a26:	bf00      	nop
 8000a28:	20000004 	.word	0x20000004
 8000a2c:	08001191 	.word	0x08001191
 8000a30:	20000014 	.word	0x20000014

08000a34 <cleanup_stdio>:
 8000a34:	6841      	ldr	r1, [r0, #4]
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <cleanup_stdio+0x34>)
 8000a38:	4299      	cmp	r1, r3
 8000a3a:	b510      	push	{r4, lr}
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	d001      	beq.n	8000a44 <cleanup_stdio+0x10>
 8000a40:	f000 fba6 	bl	8001190 <_fflush_r>
 8000a44:	68a1      	ldr	r1, [r4, #8]
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <cleanup_stdio+0x38>)
 8000a48:	4299      	cmp	r1, r3
 8000a4a:	d002      	beq.n	8000a52 <cleanup_stdio+0x1e>
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	f000 fb9f 	bl	8001190 <_fflush_r>
 8000a52:	68e1      	ldr	r1, [r4, #12]
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <cleanup_stdio+0x3c>)
 8000a56:	4299      	cmp	r1, r3
 8000a58:	d004      	beq.n	8000a64 <cleanup_stdio+0x30>
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a60:	f000 bb96 	b.w	8001190 <_fflush_r>
 8000a64:	bd10      	pop	{r4, pc}
 8000a66:	bf00      	nop
 8000a68:	200000d4 	.word	0x200000d4
 8000a6c:	2000013c 	.word	0x2000013c
 8000a70:	200001a4 	.word	0x200001a4

08000a74 <global_stdio_init.part.0>:
 8000a74:	b510      	push	{r4, lr}
 8000a76:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <global_stdio_init.part.0+0x30>)
 8000a78:	4c0b      	ldr	r4, [pc, #44]	@ (8000aa8 <global_stdio_init.part.0+0x34>)
 8000a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000aac <global_stdio_init.part.0+0x38>)
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	4620      	mov	r0, r4
 8000a80:	2200      	movs	r2, #0
 8000a82:	2104      	movs	r1, #4
 8000a84:	f7ff ff94 	bl	80009b0 <std>
 8000a88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2109      	movs	r1, #9
 8000a90:	f7ff ff8e 	bl	80009b0 <std>
 8000a94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000a98:	2202      	movs	r2, #2
 8000a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a9e:	2112      	movs	r1, #18
 8000aa0:	f7ff bf86 	b.w	80009b0 <std>
 8000aa4:	2000020c 	.word	0x2000020c
 8000aa8:	200000d4 	.word	0x200000d4
 8000aac:	08000a1d 	.word	0x08000a1d

08000ab0 <__sfp_lock_acquire>:
 8000ab0:	4801      	ldr	r0, [pc, #4]	@ (8000ab8 <__sfp_lock_acquire+0x8>)
 8000ab2:	f000 b9ee 	b.w	8000e92 <__retarget_lock_acquire_recursive>
 8000ab6:	bf00      	nop
 8000ab8:	20000215 	.word	0x20000215

08000abc <__sfp_lock_release>:
 8000abc:	4801      	ldr	r0, [pc, #4]	@ (8000ac4 <__sfp_lock_release+0x8>)
 8000abe:	f000 b9e9 	b.w	8000e94 <__retarget_lock_release_recursive>
 8000ac2:	bf00      	nop
 8000ac4:	20000215 	.word	0x20000215

08000ac8 <__sinit>:
 8000ac8:	b510      	push	{r4, lr}
 8000aca:	4604      	mov	r4, r0
 8000acc:	f7ff fff0 	bl	8000ab0 <__sfp_lock_acquire>
 8000ad0:	6a23      	ldr	r3, [r4, #32]
 8000ad2:	b11b      	cbz	r3, 8000adc <__sinit+0x14>
 8000ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ad8:	f7ff bff0 	b.w	8000abc <__sfp_lock_release>
 8000adc:	4b04      	ldr	r3, [pc, #16]	@ (8000af0 <__sinit+0x28>)
 8000ade:	6223      	str	r3, [r4, #32]
 8000ae0:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <__sinit+0x2c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f5      	bne.n	8000ad4 <__sinit+0xc>
 8000ae8:	f7ff ffc4 	bl	8000a74 <global_stdio_init.part.0>
 8000aec:	e7f2      	b.n	8000ad4 <__sinit+0xc>
 8000aee:	bf00      	nop
 8000af0:	08000a35 	.word	0x08000a35
 8000af4:	2000020c 	.word	0x2000020c

08000af8 <_fwalk_sglue>:
 8000af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000afc:	4607      	mov	r7, r0
 8000afe:	4688      	mov	r8, r1
 8000b00:	4614      	mov	r4, r2
 8000b02:	2600      	movs	r6, #0
 8000b04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b08:	f1b9 0901 	subs.w	r9, r9, #1
 8000b0c:	d505      	bpl.n	8000b1a <_fwalk_sglue+0x22>
 8000b0e:	6824      	ldr	r4, [r4, #0]
 8000b10:	2c00      	cmp	r4, #0
 8000b12:	d1f7      	bne.n	8000b04 <_fwalk_sglue+0xc>
 8000b14:	4630      	mov	r0, r6
 8000b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b1a:	89ab      	ldrh	r3, [r5, #12]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d907      	bls.n	8000b30 <_fwalk_sglue+0x38>
 8000b20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b24:	3301      	adds	r3, #1
 8000b26:	d003      	beq.n	8000b30 <_fwalk_sglue+0x38>
 8000b28:	4629      	mov	r1, r5
 8000b2a:	4638      	mov	r0, r7
 8000b2c:	47c0      	blx	r8
 8000b2e:	4306      	orrs	r6, r0
 8000b30:	3568      	adds	r5, #104	@ 0x68
 8000b32:	e7e9      	b.n	8000b08 <_fwalk_sglue+0x10>

08000b34 <_puts_r>:
 8000b34:	6a03      	ldr	r3, [r0, #32]
 8000b36:	b570      	push	{r4, r5, r6, lr}
 8000b38:	6884      	ldr	r4, [r0, #8]
 8000b3a:	4605      	mov	r5, r0
 8000b3c:	460e      	mov	r6, r1
 8000b3e:	b90b      	cbnz	r3, 8000b44 <_puts_r+0x10>
 8000b40:	f7ff ffc2 	bl	8000ac8 <__sinit>
 8000b44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b46:	07db      	lsls	r3, r3, #31
 8000b48:	d405      	bmi.n	8000b56 <_puts_r+0x22>
 8000b4a:	89a3      	ldrh	r3, [r4, #12]
 8000b4c:	0598      	lsls	r0, r3, #22
 8000b4e:	d402      	bmi.n	8000b56 <_puts_r+0x22>
 8000b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b52:	f000 f99e 	bl	8000e92 <__retarget_lock_acquire_recursive>
 8000b56:	89a3      	ldrh	r3, [r4, #12]
 8000b58:	0719      	lsls	r1, r3, #28
 8000b5a:	d502      	bpl.n	8000b62 <_puts_r+0x2e>
 8000b5c:	6923      	ldr	r3, [r4, #16]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d135      	bne.n	8000bce <_puts_r+0x9a>
 8000b62:	4621      	mov	r1, r4
 8000b64:	4628      	mov	r0, r5
 8000b66:	f000 f8c5 	bl	8000cf4 <__swsetup_r>
 8000b6a:	b380      	cbz	r0, 8000bce <_puts_r+0x9a>
 8000b6c:	f04f 35ff 	mov.w	r5, #4294967295
 8000b70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b72:	07da      	lsls	r2, r3, #31
 8000b74:	d405      	bmi.n	8000b82 <_puts_r+0x4e>
 8000b76:	89a3      	ldrh	r3, [r4, #12]
 8000b78:	059b      	lsls	r3, r3, #22
 8000b7a:	d402      	bmi.n	8000b82 <_puts_r+0x4e>
 8000b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b7e:	f000 f989 	bl	8000e94 <__retarget_lock_release_recursive>
 8000b82:	4628      	mov	r0, r5
 8000b84:	bd70      	pop	{r4, r5, r6, pc}
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	da04      	bge.n	8000b94 <_puts_r+0x60>
 8000b8a:	69a2      	ldr	r2, [r4, #24]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dc17      	bgt.n	8000bc0 <_puts_r+0x8c>
 8000b90:	290a      	cmp	r1, #10
 8000b92:	d015      	beq.n	8000bc0 <_puts_r+0x8c>
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	6022      	str	r2, [r4, #0]
 8000b9a:	7019      	strb	r1, [r3, #0]
 8000b9c:	68a3      	ldr	r3, [r4, #8]
 8000b9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	60a3      	str	r3, [r4, #8]
 8000ba6:	2900      	cmp	r1, #0
 8000ba8:	d1ed      	bne.n	8000b86 <_puts_r+0x52>
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	da11      	bge.n	8000bd2 <_puts_r+0x9e>
 8000bae:	4622      	mov	r2, r4
 8000bb0:	210a      	movs	r1, #10
 8000bb2:	4628      	mov	r0, r5
 8000bb4:	f000 f85f 	bl	8000c76 <__swbuf_r>
 8000bb8:	3001      	adds	r0, #1
 8000bba:	d0d7      	beq.n	8000b6c <_puts_r+0x38>
 8000bbc:	250a      	movs	r5, #10
 8000bbe:	e7d7      	b.n	8000b70 <_puts_r+0x3c>
 8000bc0:	4622      	mov	r2, r4
 8000bc2:	4628      	mov	r0, r5
 8000bc4:	f000 f857 	bl	8000c76 <__swbuf_r>
 8000bc8:	3001      	adds	r0, #1
 8000bca:	d1e7      	bne.n	8000b9c <_puts_r+0x68>
 8000bcc:	e7ce      	b.n	8000b6c <_puts_r+0x38>
 8000bce:	3e01      	subs	r6, #1
 8000bd0:	e7e4      	b.n	8000b9c <_puts_r+0x68>
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	1c5a      	adds	r2, r3, #1
 8000bd6:	6022      	str	r2, [r4, #0]
 8000bd8:	220a      	movs	r2, #10
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e7ee      	b.n	8000bbc <_puts_r+0x88>
	...

08000be0 <puts>:
 8000be0:	4b02      	ldr	r3, [pc, #8]	@ (8000bec <puts+0xc>)
 8000be2:	4601      	mov	r1, r0
 8000be4:	6818      	ldr	r0, [r3, #0]
 8000be6:	f7ff bfa5 	b.w	8000b34 <_puts_r>
 8000bea:	bf00      	nop
 8000bec:	20000010 	.word	0x20000010

08000bf0 <__sread>:
 8000bf0:	b510      	push	{r4, lr}
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bf8:	f000 f8fc 	bl	8000df4 <_read_r>
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	bfab      	itete	ge
 8000c00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000c02:	89a3      	ldrhlt	r3, [r4, #12]
 8000c04:	181b      	addge	r3, r3, r0
 8000c06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000c0a:	bfac      	ite	ge
 8000c0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000c0e:	81a3      	strhlt	r3, [r4, #12]
 8000c10:	bd10      	pop	{r4, pc}

08000c12 <__swrite>:
 8000c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c16:	461f      	mov	r7, r3
 8000c18:	898b      	ldrh	r3, [r1, #12]
 8000c1a:	05db      	lsls	r3, r3, #23
 8000c1c:	4605      	mov	r5, r0
 8000c1e:	460c      	mov	r4, r1
 8000c20:	4616      	mov	r6, r2
 8000c22:	d505      	bpl.n	8000c30 <__swrite+0x1e>
 8000c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c28:	2302      	movs	r3, #2
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f000 f8d0 	bl	8000dd0 <_lseek_r>
 8000c30:	89a3      	ldrh	r3, [r4, #12]
 8000c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c3a:	81a3      	strh	r3, [r4, #12]
 8000c3c:	4632      	mov	r2, r6
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4628      	mov	r0, r5
 8000c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c46:	f000 b8e7 	b.w	8000e18 <_write_r>

08000c4a <__sseek>:
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	460c      	mov	r4, r1
 8000c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c52:	f000 f8bd 	bl	8000dd0 <_lseek_r>
 8000c56:	1c43      	adds	r3, r0, #1
 8000c58:	89a3      	ldrh	r3, [r4, #12]
 8000c5a:	bf15      	itete	ne
 8000c5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000c5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000c62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000c66:	81a3      	strheq	r3, [r4, #12]
 8000c68:	bf18      	it	ne
 8000c6a:	81a3      	strhne	r3, [r4, #12]
 8000c6c:	bd10      	pop	{r4, pc}

08000c6e <__sclose>:
 8000c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c72:	f000 b89d 	b.w	8000db0 <_close_r>

08000c76 <__swbuf_r>:
 8000c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c78:	460e      	mov	r6, r1
 8000c7a:	4614      	mov	r4, r2
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	b118      	cbz	r0, 8000c88 <__swbuf_r+0x12>
 8000c80:	6a03      	ldr	r3, [r0, #32]
 8000c82:	b90b      	cbnz	r3, 8000c88 <__swbuf_r+0x12>
 8000c84:	f7ff ff20 	bl	8000ac8 <__sinit>
 8000c88:	69a3      	ldr	r3, [r4, #24]
 8000c8a:	60a3      	str	r3, [r4, #8]
 8000c8c:	89a3      	ldrh	r3, [r4, #12]
 8000c8e:	071a      	lsls	r2, r3, #28
 8000c90:	d501      	bpl.n	8000c96 <__swbuf_r+0x20>
 8000c92:	6923      	ldr	r3, [r4, #16]
 8000c94:	b943      	cbnz	r3, 8000ca8 <__swbuf_r+0x32>
 8000c96:	4621      	mov	r1, r4
 8000c98:	4628      	mov	r0, r5
 8000c9a:	f000 f82b 	bl	8000cf4 <__swsetup_r>
 8000c9e:	b118      	cbz	r0, 8000ca8 <__swbuf_r+0x32>
 8000ca0:	f04f 37ff 	mov.w	r7, #4294967295
 8000ca4:	4638      	mov	r0, r7
 8000ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	6922      	ldr	r2, [r4, #16]
 8000cac:	1a98      	subs	r0, r3, r2
 8000cae:	6963      	ldr	r3, [r4, #20]
 8000cb0:	b2f6      	uxtb	r6, r6
 8000cb2:	4283      	cmp	r3, r0
 8000cb4:	4637      	mov	r7, r6
 8000cb6:	dc05      	bgt.n	8000cc4 <__swbuf_r+0x4e>
 8000cb8:	4621      	mov	r1, r4
 8000cba:	4628      	mov	r0, r5
 8000cbc:	f000 fa68 	bl	8001190 <_fflush_r>
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	d1ed      	bne.n	8000ca0 <__swbuf_r+0x2a>
 8000cc4:	68a3      	ldr	r3, [r4, #8]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	60a3      	str	r3, [r4, #8]
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	6022      	str	r2, [r4, #0]
 8000cd0:	701e      	strb	r6, [r3, #0]
 8000cd2:	6962      	ldr	r2, [r4, #20]
 8000cd4:	1c43      	adds	r3, r0, #1
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d004      	beq.n	8000ce4 <__swbuf_r+0x6e>
 8000cda:	89a3      	ldrh	r3, [r4, #12]
 8000cdc:	07db      	lsls	r3, r3, #31
 8000cde:	d5e1      	bpl.n	8000ca4 <__swbuf_r+0x2e>
 8000ce0:	2e0a      	cmp	r6, #10
 8000ce2:	d1df      	bne.n	8000ca4 <__swbuf_r+0x2e>
 8000ce4:	4621      	mov	r1, r4
 8000ce6:	4628      	mov	r0, r5
 8000ce8:	f000 fa52 	bl	8001190 <_fflush_r>
 8000cec:	2800      	cmp	r0, #0
 8000cee:	d0d9      	beq.n	8000ca4 <__swbuf_r+0x2e>
 8000cf0:	e7d6      	b.n	8000ca0 <__swbuf_r+0x2a>
	...

08000cf4 <__swsetup_r>:
 8000cf4:	b538      	push	{r3, r4, r5, lr}
 8000cf6:	4b29      	ldr	r3, [pc, #164]	@ (8000d9c <__swsetup_r+0xa8>)
 8000cf8:	4605      	mov	r5, r0
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	460c      	mov	r4, r1
 8000cfe:	b118      	cbz	r0, 8000d08 <__swsetup_r+0x14>
 8000d00:	6a03      	ldr	r3, [r0, #32]
 8000d02:	b90b      	cbnz	r3, 8000d08 <__swsetup_r+0x14>
 8000d04:	f7ff fee0 	bl	8000ac8 <__sinit>
 8000d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d0c:	0719      	lsls	r1, r3, #28
 8000d0e:	d422      	bmi.n	8000d56 <__swsetup_r+0x62>
 8000d10:	06da      	lsls	r2, r3, #27
 8000d12:	d407      	bmi.n	8000d24 <__swsetup_r+0x30>
 8000d14:	2209      	movs	r2, #9
 8000d16:	602a      	str	r2, [r5, #0]
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	81a3      	strh	r3, [r4, #12]
 8000d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d22:	e033      	b.n	8000d8c <__swsetup_r+0x98>
 8000d24:	0758      	lsls	r0, r3, #29
 8000d26:	d512      	bpl.n	8000d4e <__swsetup_r+0x5a>
 8000d28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d2a:	b141      	cbz	r1, 8000d3e <__swsetup_r+0x4a>
 8000d2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d002      	beq.n	8000d3a <__swsetup_r+0x46>
 8000d34:	4628      	mov	r0, r5
 8000d36:	f000 f8af 	bl	8000e98 <_free_r>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d3e:	89a3      	ldrh	r3, [r4, #12]
 8000d40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000d44:	81a3      	strh	r3, [r4, #12]
 8000d46:	2300      	movs	r3, #0
 8000d48:	6063      	str	r3, [r4, #4]
 8000d4a:	6923      	ldr	r3, [r4, #16]
 8000d4c:	6023      	str	r3, [r4, #0]
 8000d4e:	89a3      	ldrh	r3, [r4, #12]
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	81a3      	strh	r3, [r4, #12]
 8000d56:	6923      	ldr	r3, [r4, #16]
 8000d58:	b94b      	cbnz	r3, 8000d6e <__swsetup_r+0x7a>
 8000d5a:	89a3      	ldrh	r3, [r4, #12]
 8000d5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d64:	d003      	beq.n	8000d6e <__swsetup_r+0x7a>
 8000d66:	4621      	mov	r1, r4
 8000d68:	4628      	mov	r0, r5
 8000d6a:	f000 fa5f 	bl	800122c <__smakebuf_r>
 8000d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d72:	f013 0201 	ands.w	r2, r3, #1
 8000d76:	d00a      	beq.n	8000d8e <__swsetup_r+0x9a>
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60a2      	str	r2, [r4, #8]
 8000d7c:	6962      	ldr	r2, [r4, #20]
 8000d7e:	4252      	negs	r2, r2
 8000d80:	61a2      	str	r2, [r4, #24]
 8000d82:	6922      	ldr	r2, [r4, #16]
 8000d84:	b942      	cbnz	r2, 8000d98 <__swsetup_r+0xa4>
 8000d86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000d8a:	d1c5      	bne.n	8000d18 <__swsetup_r+0x24>
 8000d8c:	bd38      	pop	{r3, r4, r5, pc}
 8000d8e:	0799      	lsls	r1, r3, #30
 8000d90:	bf58      	it	pl
 8000d92:	6962      	ldrpl	r2, [r4, #20]
 8000d94:	60a2      	str	r2, [r4, #8]
 8000d96:	e7f4      	b.n	8000d82 <__swsetup_r+0x8e>
 8000d98:	2000      	movs	r0, #0
 8000d9a:	e7f7      	b.n	8000d8c <__swsetup_r+0x98>
 8000d9c:	20000010 	.word	0x20000010

08000da0 <memset>:
 8000da0:	4402      	add	r2, r0
 8000da2:	4603      	mov	r3, r0
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d100      	bne.n	8000daa <memset+0xa>
 8000da8:	4770      	bx	lr
 8000daa:	f803 1b01 	strb.w	r1, [r3], #1
 8000dae:	e7f9      	b.n	8000da4 <memset+0x4>

08000db0 <_close_r>:
 8000db0:	b538      	push	{r3, r4, r5, lr}
 8000db2:	4d06      	ldr	r5, [pc, #24]	@ (8000dcc <_close_r+0x1c>)
 8000db4:	2300      	movs	r3, #0
 8000db6:	4604      	mov	r4, r0
 8000db8:	4608      	mov	r0, r1
 8000dba:	602b      	str	r3, [r5, #0]
 8000dbc:	f7ff fd63 	bl	8000886 <_close>
 8000dc0:	1c43      	adds	r3, r0, #1
 8000dc2:	d102      	bne.n	8000dca <_close_r+0x1a>
 8000dc4:	682b      	ldr	r3, [r5, #0]
 8000dc6:	b103      	cbz	r3, 8000dca <_close_r+0x1a>
 8000dc8:	6023      	str	r3, [r4, #0]
 8000dca:	bd38      	pop	{r3, r4, r5, pc}
 8000dcc:	20000210 	.word	0x20000210

08000dd0 <_lseek_r>:
 8000dd0:	b538      	push	{r3, r4, r5, lr}
 8000dd2:	4d07      	ldr	r5, [pc, #28]	@ (8000df0 <_lseek_r+0x20>)
 8000dd4:	4604      	mov	r4, r0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	4611      	mov	r1, r2
 8000dda:	2200      	movs	r2, #0
 8000ddc:	602a      	str	r2, [r5, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	f7ff fd78 	bl	80008d4 <_lseek>
 8000de4:	1c43      	adds	r3, r0, #1
 8000de6:	d102      	bne.n	8000dee <_lseek_r+0x1e>
 8000de8:	682b      	ldr	r3, [r5, #0]
 8000dea:	b103      	cbz	r3, 8000dee <_lseek_r+0x1e>
 8000dec:	6023      	str	r3, [r4, #0]
 8000dee:	bd38      	pop	{r3, r4, r5, pc}
 8000df0:	20000210 	.word	0x20000210

08000df4 <_read_r>:
 8000df4:	b538      	push	{r3, r4, r5, lr}
 8000df6:	4d07      	ldr	r5, [pc, #28]	@ (8000e14 <_read_r+0x20>)
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	2200      	movs	r2, #0
 8000e00:	602a      	str	r2, [r5, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	f7ff fd06 	bl	8000814 <_read>
 8000e08:	1c43      	adds	r3, r0, #1
 8000e0a:	d102      	bne.n	8000e12 <_read_r+0x1e>
 8000e0c:	682b      	ldr	r3, [r5, #0]
 8000e0e:	b103      	cbz	r3, 8000e12 <_read_r+0x1e>
 8000e10:	6023      	str	r3, [r4, #0]
 8000e12:	bd38      	pop	{r3, r4, r5, pc}
 8000e14:	20000210 	.word	0x20000210

08000e18 <_write_r>:
 8000e18:	b538      	push	{r3, r4, r5, lr}
 8000e1a:	4d07      	ldr	r5, [pc, #28]	@ (8000e38 <_write_r+0x20>)
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	4608      	mov	r0, r1
 8000e20:	4611      	mov	r1, r2
 8000e22:	2200      	movs	r2, #0
 8000e24:	602a      	str	r2, [r5, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	f7ff fd11 	bl	800084e <_write>
 8000e2c:	1c43      	adds	r3, r0, #1
 8000e2e:	d102      	bne.n	8000e36 <_write_r+0x1e>
 8000e30:	682b      	ldr	r3, [r5, #0]
 8000e32:	b103      	cbz	r3, 8000e36 <_write_r+0x1e>
 8000e34:	6023      	str	r3, [r4, #0]
 8000e36:	bd38      	pop	{r3, r4, r5, pc}
 8000e38:	20000210 	.word	0x20000210

08000e3c <__errno>:
 8000e3c:	4b01      	ldr	r3, [pc, #4]	@ (8000e44 <__errno+0x8>)
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000010 	.word	0x20000010

08000e48 <__libc_init_array>:
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8000e80 <__libc_init_array+0x38>)
 8000e4c:	4c0d      	ldr	r4, [pc, #52]	@ (8000e84 <__libc_init_array+0x3c>)
 8000e4e:	1b64      	subs	r4, r4, r5
 8000e50:	10a4      	asrs	r4, r4, #2
 8000e52:	2600      	movs	r6, #0
 8000e54:	42a6      	cmp	r6, r4
 8000e56:	d109      	bne.n	8000e6c <__libc_init_array+0x24>
 8000e58:	4d0b      	ldr	r5, [pc, #44]	@ (8000e88 <__libc_init_array+0x40>)
 8000e5a:	4c0c      	ldr	r4, [pc, #48]	@ (8000e8c <__libc_init_array+0x44>)
 8000e5c:	f000 fa54 	bl	8001308 <_init>
 8000e60:	1b64      	subs	r4, r4, r5
 8000e62:	10a4      	asrs	r4, r4, #2
 8000e64:	2600      	movs	r6, #0
 8000e66:	42a6      	cmp	r6, r4
 8000e68:	d105      	bne.n	8000e76 <__libc_init_array+0x2e>
 8000e6a:	bd70      	pop	{r4, r5, r6, pc}
 8000e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e70:	4798      	blx	r3
 8000e72:	3601      	adds	r6, #1
 8000e74:	e7ee      	b.n	8000e54 <__libc_init_array+0xc>
 8000e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e7a:	4798      	blx	r3
 8000e7c:	3601      	adds	r6, #1
 8000e7e:	e7f2      	b.n	8000e66 <__libc_init_array+0x1e>
 8000e80:	08001368 	.word	0x08001368
 8000e84:	08001368 	.word	0x08001368
 8000e88:	08001368 	.word	0x08001368
 8000e8c:	0800136c 	.word	0x0800136c

08000e90 <__retarget_lock_init_recursive>:
 8000e90:	4770      	bx	lr

08000e92 <__retarget_lock_acquire_recursive>:
 8000e92:	4770      	bx	lr

08000e94 <__retarget_lock_release_recursive>:
 8000e94:	4770      	bx	lr
	...

08000e98 <_free_r>:
 8000e98:	b538      	push	{r3, r4, r5, lr}
 8000e9a:	4605      	mov	r5, r0
 8000e9c:	2900      	cmp	r1, #0
 8000e9e:	d041      	beq.n	8000f24 <_free_r+0x8c>
 8000ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ea4:	1f0c      	subs	r4, r1, #4
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	bfb8      	it	lt
 8000eaa:	18e4      	addlt	r4, r4, r3
 8000eac:	f000 f8e0 	bl	8001070 <__malloc_lock>
 8000eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f28 <_free_r+0x90>)
 8000eb2:	6813      	ldr	r3, [r2, #0]
 8000eb4:	b933      	cbnz	r3, 8000ec4 <_free_r+0x2c>
 8000eb6:	6063      	str	r3, [r4, #4]
 8000eb8:	6014      	str	r4, [r2, #0]
 8000eba:	4628      	mov	r0, r5
 8000ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec0:	f000 b8dc 	b.w	800107c <__malloc_unlock>
 8000ec4:	42a3      	cmp	r3, r4
 8000ec6:	d908      	bls.n	8000eda <_free_r+0x42>
 8000ec8:	6820      	ldr	r0, [r4, #0]
 8000eca:	1821      	adds	r1, r4, r0
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	bf01      	itttt	eq
 8000ed0:	6819      	ldreq	r1, [r3, #0]
 8000ed2:	685b      	ldreq	r3, [r3, #4]
 8000ed4:	1809      	addeq	r1, r1, r0
 8000ed6:	6021      	streq	r1, [r4, #0]
 8000ed8:	e7ed      	b.n	8000eb6 <_free_r+0x1e>
 8000eda:	461a      	mov	r2, r3
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	b10b      	cbz	r3, 8000ee4 <_free_r+0x4c>
 8000ee0:	42a3      	cmp	r3, r4
 8000ee2:	d9fa      	bls.n	8000eda <_free_r+0x42>
 8000ee4:	6811      	ldr	r1, [r2, #0]
 8000ee6:	1850      	adds	r0, r2, r1
 8000ee8:	42a0      	cmp	r0, r4
 8000eea:	d10b      	bne.n	8000f04 <_free_r+0x6c>
 8000eec:	6820      	ldr	r0, [r4, #0]
 8000eee:	4401      	add	r1, r0
 8000ef0:	1850      	adds	r0, r2, r1
 8000ef2:	4283      	cmp	r3, r0
 8000ef4:	6011      	str	r1, [r2, #0]
 8000ef6:	d1e0      	bne.n	8000eba <_free_r+0x22>
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	6053      	str	r3, [r2, #4]
 8000efe:	4408      	add	r0, r1
 8000f00:	6010      	str	r0, [r2, #0]
 8000f02:	e7da      	b.n	8000eba <_free_r+0x22>
 8000f04:	d902      	bls.n	8000f0c <_free_r+0x74>
 8000f06:	230c      	movs	r3, #12
 8000f08:	602b      	str	r3, [r5, #0]
 8000f0a:	e7d6      	b.n	8000eba <_free_r+0x22>
 8000f0c:	6820      	ldr	r0, [r4, #0]
 8000f0e:	1821      	adds	r1, r4, r0
 8000f10:	428b      	cmp	r3, r1
 8000f12:	bf04      	itt	eq
 8000f14:	6819      	ldreq	r1, [r3, #0]
 8000f16:	685b      	ldreq	r3, [r3, #4]
 8000f18:	6063      	str	r3, [r4, #4]
 8000f1a:	bf04      	itt	eq
 8000f1c:	1809      	addeq	r1, r1, r0
 8000f1e:	6021      	streq	r1, [r4, #0]
 8000f20:	6054      	str	r4, [r2, #4]
 8000f22:	e7ca      	b.n	8000eba <_free_r+0x22>
 8000f24:	bd38      	pop	{r3, r4, r5, pc}
 8000f26:	bf00      	nop
 8000f28:	2000021c 	.word	0x2000021c

08000f2c <sbrk_aligned>:
 8000f2c:	b570      	push	{r4, r5, r6, lr}
 8000f2e:	4e0f      	ldr	r6, [pc, #60]	@ (8000f6c <sbrk_aligned+0x40>)
 8000f30:	460c      	mov	r4, r1
 8000f32:	6831      	ldr	r1, [r6, #0]
 8000f34:	4605      	mov	r5, r0
 8000f36:	b911      	cbnz	r1, 8000f3e <sbrk_aligned+0x12>
 8000f38:	f000 f9d6 	bl	80012e8 <_sbrk_r>
 8000f3c:	6030      	str	r0, [r6, #0]
 8000f3e:	4621      	mov	r1, r4
 8000f40:	4628      	mov	r0, r5
 8000f42:	f000 f9d1 	bl	80012e8 <_sbrk_r>
 8000f46:	1c43      	adds	r3, r0, #1
 8000f48:	d103      	bne.n	8000f52 <sbrk_aligned+0x26>
 8000f4a:	f04f 34ff 	mov.w	r4, #4294967295
 8000f4e:	4620      	mov	r0, r4
 8000f50:	bd70      	pop	{r4, r5, r6, pc}
 8000f52:	1cc4      	adds	r4, r0, #3
 8000f54:	f024 0403 	bic.w	r4, r4, #3
 8000f58:	42a0      	cmp	r0, r4
 8000f5a:	d0f8      	beq.n	8000f4e <sbrk_aligned+0x22>
 8000f5c:	1a21      	subs	r1, r4, r0
 8000f5e:	4628      	mov	r0, r5
 8000f60:	f000 f9c2 	bl	80012e8 <_sbrk_r>
 8000f64:	3001      	adds	r0, #1
 8000f66:	d1f2      	bne.n	8000f4e <sbrk_aligned+0x22>
 8000f68:	e7ef      	b.n	8000f4a <sbrk_aligned+0x1e>
 8000f6a:	bf00      	nop
 8000f6c:	20000218 	.word	0x20000218

08000f70 <_malloc_r>:
 8000f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f74:	1ccd      	adds	r5, r1, #3
 8000f76:	f025 0503 	bic.w	r5, r5, #3
 8000f7a:	3508      	adds	r5, #8
 8000f7c:	2d0c      	cmp	r5, #12
 8000f7e:	bf38      	it	cc
 8000f80:	250c      	movcc	r5, #12
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	4606      	mov	r6, r0
 8000f86:	db01      	blt.n	8000f8c <_malloc_r+0x1c>
 8000f88:	42a9      	cmp	r1, r5
 8000f8a:	d904      	bls.n	8000f96 <_malloc_r+0x26>
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	6033      	str	r3, [r6, #0]
 8000f90:	2000      	movs	r0, #0
 8000f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800106c <_malloc_r+0xfc>
 8000f9a:	f000 f869 	bl	8001070 <__malloc_lock>
 8000f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8000fa2:	461c      	mov	r4, r3
 8000fa4:	bb44      	cbnz	r4, 8000ff8 <_malloc_r+0x88>
 8000fa6:	4629      	mov	r1, r5
 8000fa8:	4630      	mov	r0, r6
 8000faa:	f7ff ffbf 	bl	8000f2c <sbrk_aligned>
 8000fae:	1c43      	adds	r3, r0, #1
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	d158      	bne.n	8001066 <_malloc_r+0xf6>
 8000fb4:	f8d8 4000 	ldr.w	r4, [r8]
 8000fb8:	4627      	mov	r7, r4
 8000fba:	2f00      	cmp	r7, #0
 8000fbc:	d143      	bne.n	8001046 <_malloc_r+0xd6>
 8000fbe:	2c00      	cmp	r4, #0
 8000fc0:	d04b      	beq.n	800105a <_malloc_r+0xea>
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	eb04 0903 	add.w	r9, r4, r3
 8000fcc:	f000 f98c 	bl	80012e8 <_sbrk_r>
 8000fd0:	4581      	cmp	r9, r0
 8000fd2:	d142      	bne.n	800105a <_malloc_r+0xea>
 8000fd4:	6821      	ldr	r1, [r4, #0]
 8000fd6:	1a6d      	subs	r5, r5, r1
 8000fd8:	4629      	mov	r1, r5
 8000fda:	4630      	mov	r0, r6
 8000fdc:	f7ff ffa6 	bl	8000f2c <sbrk_aligned>
 8000fe0:	3001      	adds	r0, #1
 8000fe2:	d03a      	beq.n	800105a <_malloc_r+0xea>
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	442b      	add	r3, r5
 8000fe8:	6023      	str	r3, [r4, #0]
 8000fea:	f8d8 3000 	ldr.w	r3, [r8]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	bb62      	cbnz	r2, 800104c <_malloc_r+0xdc>
 8000ff2:	f8c8 7000 	str.w	r7, [r8]
 8000ff6:	e00f      	b.n	8001018 <_malloc_r+0xa8>
 8000ff8:	6822      	ldr	r2, [r4, #0]
 8000ffa:	1b52      	subs	r2, r2, r5
 8000ffc:	d420      	bmi.n	8001040 <_malloc_r+0xd0>
 8000ffe:	2a0b      	cmp	r2, #11
 8001000:	d917      	bls.n	8001032 <_malloc_r+0xc2>
 8001002:	1961      	adds	r1, r4, r5
 8001004:	42a3      	cmp	r3, r4
 8001006:	6025      	str	r5, [r4, #0]
 8001008:	bf18      	it	ne
 800100a:	6059      	strne	r1, [r3, #4]
 800100c:	6863      	ldr	r3, [r4, #4]
 800100e:	bf08      	it	eq
 8001010:	f8c8 1000 	streq.w	r1, [r8]
 8001014:	5162      	str	r2, [r4, r5]
 8001016:	604b      	str	r3, [r1, #4]
 8001018:	4630      	mov	r0, r6
 800101a:	f000 f82f 	bl	800107c <__malloc_unlock>
 800101e:	f104 000b 	add.w	r0, r4, #11
 8001022:	1d23      	adds	r3, r4, #4
 8001024:	f020 0007 	bic.w	r0, r0, #7
 8001028:	1ac2      	subs	r2, r0, r3
 800102a:	bf1c      	itt	ne
 800102c:	1a1b      	subne	r3, r3, r0
 800102e:	50a3      	strne	r3, [r4, r2]
 8001030:	e7af      	b.n	8000f92 <_malloc_r+0x22>
 8001032:	6862      	ldr	r2, [r4, #4]
 8001034:	42a3      	cmp	r3, r4
 8001036:	bf0c      	ite	eq
 8001038:	f8c8 2000 	streq.w	r2, [r8]
 800103c:	605a      	strne	r2, [r3, #4]
 800103e:	e7eb      	b.n	8001018 <_malloc_r+0xa8>
 8001040:	4623      	mov	r3, r4
 8001042:	6864      	ldr	r4, [r4, #4]
 8001044:	e7ae      	b.n	8000fa4 <_malloc_r+0x34>
 8001046:	463c      	mov	r4, r7
 8001048:	687f      	ldr	r7, [r7, #4]
 800104a:	e7b6      	b.n	8000fba <_malloc_r+0x4a>
 800104c:	461a      	mov	r2, r3
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	42a3      	cmp	r3, r4
 8001052:	d1fb      	bne.n	800104c <_malloc_r+0xdc>
 8001054:	2300      	movs	r3, #0
 8001056:	6053      	str	r3, [r2, #4]
 8001058:	e7de      	b.n	8001018 <_malloc_r+0xa8>
 800105a:	230c      	movs	r3, #12
 800105c:	6033      	str	r3, [r6, #0]
 800105e:	4630      	mov	r0, r6
 8001060:	f000 f80c 	bl	800107c <__malloc_unlock>
 8001064:	e794      	b.n	8000f90 <_malloc_r+0x20>
 8001066:	6005      	str	r5, [r0, #0]
 8001068:	e7d6      	b.n	8001018 <_malloc_r+0xa8>
 800106a:	bf00      	nop
 800106c:	2000021c 	.word	0x2000021c

08001070 <__malloc_lock>:
 8001070:	4801      	ldr	r0, [pc, #4]	@ (8001078 <__malloc_lock+0x8>)
 8001072:	f7ff bf0e 	b.w	8000e92 <__retarget_lock_acquire_recursive>
 8001076:	bf00      	nop
 8001078:	20000214 	.word	0x20000214

0800107c <__malloc_unlock>:
 800107c:	4801      	ldr	r0, [pc, #4]	@ (8001084 <__malloc_unlock+0x8>)
 800107e:	f7ff bf09 	b.w	8000e94 <__retarget_lock_release_recursive>
 8001082:	bf00      	nop
 8001084:	20000214 	.word	0x20000214

08001088 <__sflush_r>:
 8001088:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800108c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001090:	0716      	lsls	r6, r2, #28
 8001092:	4605      	mov	r5, r0
 8001094:	460c      	mov	r4, r1
 8001096:	d454      	bmi.n	8001142 <__sflush_r+0xba>
 8001098:	684b      	ldr	r3, [r1, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	dc02      	bgt.n	80010a4 <__sflush_r+0x1c>
 800109e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dd48      	ble.n	8001136 <__sflush_r+0xae>
 80010a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d045      	beq.n	8001136 <__sflush_r+0xae>
 80010aa:	2300      	movs	r3, #0
 80010ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80010b0:	682f      	ldr	r7, [r5, #0]
 80010b2:	6a21      	ldr	r1, [r4, #32]
 80010b4:	602b      	str	r3, [r5, #0]
 80010b6:	d030      	beq.n	800111a <__sflush_r+0x92>
 80010b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80010ba:	89a3      	ldrh	r3, [r4, #12]
 80010bc:	0759      	lsls	r1, r3, #29
 80010be:	d505      	bpl.n	80010cc <__sflush_r+0x44>
 80010c0:	6863      	ldr	r3, [r4, #4]
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80010c6:	b10b      	cbz	r3, 80010cc <__sflush_r+0x44>
 80010c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	2300      	movs	r3, #0
 80010ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010d0:	6a21      	ldr	r1, [r4, #32]
 80010d2:	4628      	mov	r0, r5
 80010d4:	47b0      	blx	r6
 80010d6:	1c43      	adds	r3, r0, #1
 80010d8:	89a3      	ldrh	r3, [r4, #12]
 80010da:	d106      	bne.n	80010ea <__sflush_r+0x62>
 80010dc:	6829      	ldr	r1, [r5, #0]
 80010de:	291d      	cmp	r1, #29
 80010e0:	d82b      	bhi.n	800113a <__sflush_r+0xb2>
 80010e2:	4a2a      	ldr	r2, [pc, #168]	@ (800118c <__sflush_r+0x104>)
 80010e4:	410a      	asrs	r2, r1
 80010e6:	07d6      	lsls	r6, r2, #31
 80010e8:	d427      	bmi.n	800113a <__sflush_r+0xb2>
 80010ea:	2200      	movs	r2, #0
 80010ec:	6062      	str	r2, [r4, #4]
 80010ee:	04d9      	lsls	r1, r3, #19
 80010f0:	6922      	ldr	r2, [r4, #16]
 80010f2:	6022      	str	r2, [r4, #0]
 80010f4:	d504      	bpl.n	8001100 <__sflush_r+0x78>
 80010f6:	1c42      	adds	r2, r0, #1
 80010f8:	d101      	bne.n	80010fe <__sflush_r+0x76>
 80010fa:	682b      	ldr	r3, [r5, #0]
 80010fc:	b903      	cbnz	r3, 8001100 <__sflush_r+0x78>
 80010fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8001100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001102:	602f      	str	r7, [r5, #0]
 8001104:	b1b9      	cbz	r1, 8001136 <__sflush_r+0xae>
 8001106:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800110a:	4299      	cmp	r1, r3
 800110c:	d002      	beq.n	8001114 <__sflush_r+0x8c>
 800110e:	4628      	mov	r0, r5
 8001110:	f7ff fec2 	bl	8000e98 <_free_r>
 8001114:	2300      	movs	r3, #0
 8001116:	6363      	str	r3, [r4, #52]	@ 0x34
 8001118:	e00d      	b.n	8001136 <__sflush_r+0xae>
 800111a:	2301      	movs	r3, #1
 800111c:	4628      	mov	r0, r5
 800111e:	47b0      	blx	r6
 8001120:	4602      	mov	r2, r0
 8001122:	1c50      	adds	r0, r2, #1
 8001124:	d1c9      	bne.n	80010ba <__sflush_r+0x32>
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0c6      	beq.n	80010ba <__sflush_r+0x32>
 800112c:	2b1d      	cmp	r3, #29
 800112e:	d001      	beq.n	8001134 <__sflush_r+0xac>
 8001130:	2b16      	cmp	r3, #22
 8001132:	d11e      	bne.n	8001172 <__sflush_r+0xea>
 8001134:	602f      	str	r7, [r5, #0]
 8001136:	2000      	movs	r0, #0
 8001138:	e022      	b.n	8001180 <__sflush_r+0xf8>
 800113a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800113e:	b21b      	sxth	r3, r3
 8001140:	e01b      	b.n	800117a <__sflush_r+0xf2>
 8001142:	690f      	ldr	r7, [r1, #16]
 8001144:	2f00      	cmp	r7, #0
 8001146:	d0f6      	beq.n	8001136 <__sflush_r+0xae>
 8001148:	0793      	lsls	r3, r2, #30
 800114a:	680e      	ldr	r6, [r1, #0]
 800114c:	bf08      	it	eq
 800114e:	694b      	ldreq	r3, [r1, #20]
 8001150:	600f      	str	r7, [r1, #0]
 8001152:	bf18      	it	ne
 8001154:	2300      	movne	r3, #0
 8001156:	eba6 0807 	sub.w	r8, r6, r7
 800115a:	608b      	str	r3, [r1, #8]
 800115c:	f1b8 0f00 	cmp.w	r8, #0
 8001160:	dde9      	ble.n	8001136 <__sflush_r+0xae>
 8001162:	6a21      	ldr	r1, [r4, #32]
 8001164:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001166:	4643      	mov	r3, r8
 8001168:	463a      	mov	r2, r7
 800116a:	4628      	mov	r0, r5
 800116c:	47b0      	blx	r6
 800116e:	2800      	cmp	r0, #0
 8001170:	dc08      	bgt.n	8001184 <__sflush_r+0xfc>
 8001172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800117a:	81a3      	strh	r3, [r4, #12]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001184:	4407      	add	r7, r0
 8001186:	eba8 0800 	sub.w	r8, r8, r0
 800118a:	e7e7      	b.n	800115c <__sflush_r+0xd4>
 800118c:	dfbffffe 	.word	0xdfbffffe

08001190 <_fflush_r>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	690b      	ldr	r3, [r1, #16]
 8001194:	4605      	mov	r5, r0
 8001196:	460c      	mov	r4, r1
 8001198:	b913      	cbnz	r3, 80011a0 <_fflush_r+0x10>
 800119a:	2500      	movs	r5, #0
 800119c:	4628      	mov	r0, r5
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	b118      	cbz	r0, 80011aa <_fflush_r+0x1a>
 80011a2:	6a03      	ldr	r3, [r0, #32]
 80011a4:	b90b      	cbnz	r3, 80011aa <_fflush_r+0x1a>
 80011a6:	f7ff fc8f 	bl	8000ac8 <__sinit>
 80011aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f3      	beq.n	800119a <_fflush_r+0xa>
 80011b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80011b4:	07d0      	lsls	r0, r2, #31
 80011b6:	d404      	bmi.n	80011c2 <_fflush_r+0x32>
 80011b8:	0599      	lsls	r1, r3, #22
 80011ba:	d402      	bmi.n	80011c2 <_fflush_r+0x32>
 80011bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011be:	f7ff fe68 	bl	8000e92 <__retarget_lock_acquire_recursive>
 80011c2:	4628      	mov	r0, r5
 80011c4:	4621      	mov	r1, r4
 80011c6:	f7ff ff5f 	bl	8001088 <__sflush_r>
 80011ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80011cc:	07da      	lsls	r2, r3, #31
 80011ce:	4605      	mov	r5, r0
 80011d0:	d4e4      	bmi.n	800119c <_fflush_r+0xc>
 80011d2:	89a3      	ldrh	r3, [r4, #12]
 80011d4:	059b      	lsls	r3, r3, #22
 80011d6:	d4e1      	bmi.n	800119c <_fflush_r+0xc>
 80011d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011da:	f7ff fe5b 	bl	8000e94 <__retarget_lock_release_recursive>
 80011de:	e7dd      	b.n	800119c <_fflush_r+0xc>

080011e0 <__swhatbuf_r>:
 80011e0:	b570      	push	{r4, r5, r6, lr}
 80011e2:	460c      	mov	r4, r1
 80011e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011e8:	2900      	cmp	r1, #0
 80011ea:	b096      	sub	sp, #88	@ 0x58
 80011ec:	4615      	mov	r5, r2
 80011ee:	461e      	mov	r6, r3
 80011f0:	da0d      	bge.n	800120e <__swhatbuf_r+0x2e>
 80011f2:	89a3      	ldrh	r3, [r4, #12]
 80011f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80011f8:	f04f 0100 	mov.w	r1, #0
 80011fc:	bf14      	ite	ne
 80011fe:	2340      	movne	r3, #64	@ 0x40
 8001200:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001204:	2000      	movs	r0, #0
 8001206:	6031      	str	r1, [r6, #0]
 8001208:	602b      	str	r3, [r5, #0]
 800120a:	b016      	add	sp, #88	@ 0x58
 800120c:	bd70      	pop	{r4, r5, r6, pc}
 800120e:	466a      	mov	r2, sp
 8001210:	f000 f848 	bl	80012a4 <_fstat_r>
 8001214:	2800      	cmp	r0, #0
 8001216:	dbec      	blt.n	80011f2 <__swhatbuf_r+0x12>
 8001218:	9901      	ldr	r1, [sp, #4]
 800121a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800121e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001222:	4259      	negs	r1, r3
 8001224:	4159      	adcs	r1, r3
 8001226:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800122a:	e7eb      	b.n	8001204 <__swhatbuf_r+0x24>

0800122c <__smakebuf_r>:
 800122c:	898b      	ldrh	r3, [r1, #12]
 800122e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001230:	079d      	lsls	r5, r3, #30
 8001232:	4606      	mov	r6, r0
 8001234:	460c      	mov	r4, r1
 8001236:	d507      	bpl.n	8001248 <__smakebuf_r+0x1c>
 8001238:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800123c:	6023      	str	r3, [r4, #0]
 800123e:	6123      	str	r3, [r4, #16]
 8001240:	2301      	movs	r3, #1
 8001242:	6163      	str	r3, [r4, #20]
 8001244:	b003      	add	sp, #12
 8001246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001248:	ab01      	add	r3, sp, #4
 800124a:	466a      	mov	r2, sp
 800124c:	f7ff ffc8 	bl	80011e0 <__swhatbuf_r>
 8001250:	9f00      	ldr	r7, [sp, #0]
 8001252:	4605      	mov	r5, r0
 8001254:	4639      	mov	r1, r7
 8001256:	4630      	mov	r0, r6
 8001258:	f7ff fe8a 	bl	8000f70 <_malloc_r>
 800125c:	b948      	cbnz	r0, 8001272 <__smakebuf_r+0x46>
 800125e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001262:	059a      	lsls	r2, r3, #22
 8001264:	d4ee      	bmi.n	8001244 <__smakebuf_r+0x18>
 8001266:	f023 0303 	bic.w	r3, r3, #3
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	81a3      	strh	r3, [r4, #12]
 8001270:	e7e2      	b.n	8001238 <__smakebuf_r+0xc>
 8001272:	89a3      	ldrh	r3, [r4, #12]
 8001274:	6020      	str	r0, [r4, #0]
 8001276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127a:	81a3      	strh	r3, [r4, #12]
 800127c:	9b01      	ldr	r3, [sp, #4]
 800127e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001282:	b15b      	cbz	r3, 800129c <__smakebuf_r+0x70>
 8001284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001288:	4630      	mov	r0, r6
 800128a:	f000 f81d 	bl	80012c8 <_isatty_r>
 800128e:	b128      	cbz	r0, 800129c <__smakebuf_r+0x70>
 8001290:	89a3      	ldrh	r3, [r4, #12]
 8001292:	f023 0303 	bic.w	r3, r3, #3
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	81a3      	strh	r3, [r4, #12]
 800129c:	89a3      	ldrh	r3, [r4, #12]
 800129e:	431d      	orrs	r5, r3
 80012a0:	81a5      	strh	r5, [r4, #12]
 80012a2:	e7cf      	b.n	8001244 <__smakebuf_r+0x18>

080012a4 <_fstat_r>:
 80012a4:	b538      	push	{r3, r4, r5, lr}
 80012a6:	4d07      	ldr	r5, [pc, #28]	@ (80012c4 <_fstat_r+0x20>)
 80012a8:	2300      	movs	r3, #0
 80012aa:	4604      	mov	r4, r0
 80012ac:	4608      	mov	r0, r1
 80012ae:	4611      	mov	r1, r2
 80012b0:	602b      	str	r3, [r5, #0]
 80012b2:	f7ff faf4 	bl	800089e <_fstat>
 80012b6:	1c43      	adds	r3, r0, #1
 80012b8:	d102      	bne.n	80012c0 <_fstat_r+0x1c>
 80012ba:	682b      	ldr	r3, [r5, #0]
 80012bc:	b103      	cbz	r3, 80012c0 <_fstat_r+0x1c>
 80012be:	6023      	str	r3, [r4, #0]
 80012c0:	bd38      	pop	{r3, r4, r5, pc}
 80012c2:	bf00      	nop
 80012c4:	20000210 	.word	0x20000210

080012c8 <_isatty_r>:
 80012c8:	b538      	push	{r3, r4, r5, lr}
 80012ca:	4d06      	ldr	r5, [pc, #24]	@ (80012e4 <_isatty_r+0x1c>)
 80012cc:	2300      	movs	r3, #0
 80012ce:	4604      	mov	r4, r0
 80012d0:	4608      	mov	r0, r1
 80012d2:	602b      	str	r3, [r5, #0]
 80012d4:	f7ff faf3 	bl	80008be <_isatty>
 80012d8:	1c43      	adds	r3, r0, #1
 80012da:	d102      	bne.n	80012e2 <_isatty_r+0x1a>
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	b103      	cbz	r3, 80012e2 <_isatty_r+0x1a>
 80012e0:	6023      	str	r3, [r4, #0]
 80012e2:	bd38      	pop	{r3, r4, r5, pc}
 80012e4:	20000210 	.word	0x20000210

080012e8 <_sbrk_r>:
 80012e8:	b538      	push	{r3, r4, r5, lr}
 80012ea:	4d06      	ldr	r5, [pc, #24]	@ (8001304 <_sbrk_r+0x1c>)
 80012ec:	2300      	movs	r3, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	602b      	str	r3, [r5, #0]
 80012f4:	f7ff fafc 	bl	80008f0 <_sbrk>
 80012f8:	1c43      	adds	r3, r0, #1
 80012fa:	d102      	bne.n	8001302 <_sbrk_r+0x1a>
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	b103      	cbz	r3, 8001302 <_sbrk_r+0x1a>
 8001300:	6023      	str	r3, [r4, #0]
 8001302:	bd38      	pop	{r3, r4, r5, pc}
 8001304:	20000210 	.word	0x20000210

08001308 <_init>:
 8001308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130a:	bf00      	nop
 800130c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130e:	bc08      	pop	{r3}
 8001310:	469e      	mov	lr, r3
 8001312:	4770      	bx	lr

08001314 <_fini>:
 8001314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001316:	bf00      	nop
 8001318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800131a:	bc08      	pop	{r3}
 800131c:	469e      	mov	lr, r3
 800131e:	4770      	bx	lr
