
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001190  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001318  08001318  00002318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001360  08001360  00003060  2**0
                  CONTENTS
  4 .ARM          00000000  08001360  08001360  00003060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001360  08001360  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001360  08001360  00002360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001364  08001364  00002364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001368  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          000001c0  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00003060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e16  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005b0  00000000  00000000  00003ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  00004458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000169  00000000  00000000  00004658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e0a  00000000  00000000  000047c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cae  00000000  00000000  000075cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009e1b  00000000  00000000  00009279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00013094  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d28  00000000  00000000  000130d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00013e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001300 	.word	0x08001300

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08001300 	.word	0x08001300

080001c8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ce:	4b19      	ldr	r3, [pc, #100]	@ (8000234 <led_init_all+0x6c>)
 80001d0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001d2:	4b19      	ldr	r3, [pc, #100]	@ (8000238 <led_init_all+0x70>)
 80001d4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f043 0208 	orr.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000212:	200c      	movs	r0, #12
 8000214:	f000 f82a 	bl	800026c <led_off>
    led_off(LED_ORANGE);
 8000218:	200d      	movs	r0, #13
 800021a:	f000 f827 	bl	800026c <led_off>
    led_off(LED_RED);
 800021e:	200e      	movs	r0, #14
 8000220:	f000 f824 	bl	800026c <led_off>
    led_off(LED_BLUE);
 8000224:	200f      	movs	r0, #15
 8000226:	f000 f821 	bl	800026c <led_off>



}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40023830 	.word	0x40023830
 8000238:	40020c00 	.word	0x40020c00

0800023c <led_on>:

void led_on(uint8_t led_no)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000246:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <led_on+0x2c>)
 8000248:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	79fa      	ldrb	r2, [r7, #7]
 8000250:	2101      	movs	r1, #1
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	431a      	orrs	r2, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	601a      	str	r2, [r3, #0]

}
 800025c:	bf00      	nop
 800025e:	3714      	adds	r7, #20
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr
 8000268:	40020c14 	.word	0x40020c14

0800026c <led_off>:

void led_off(uint8_t led_no)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000276:	4b09      	ldr	r3, [pc, #36]	@ (800029c <led_off+0x30>)
 8000278:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	2101      	movs	r1, #1
 8000282:	fa01 f202 	lsl.w	r2, r1, r2
 8000286:	43d2      	mvns	r2, r2
 8000288:	401a      	ands	r2, r3
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]

}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40020c14 	.word	0x40020c14

080002a0 <main>:
}TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	enable_processor_faults();//da ne bismo memoriji pristupali ilegalno da ne bude fault
 80002a4:	f000 f926 	bl	80004f4 <enable_processor_faults>

	init_scheduler_stack(SCHEDULER_STACK_START);
 80002a8:	4808      	ldr	r0, [pc, #32]	@ (80002cc <main+0x2c>)
 80002aa:	f000 f88f 	bl	80003cc <init_scheduler_stack>

	init_task_stack();
 80002ae:	f000 f893 	bl	80003d8 <init_task_stack>

	led_init_all();
 80002b2:	f7ff ff89 	bl	80001c8 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ba:	f000 f851 	bl	8000360 <init_systick_timer>
	//moram promijeniti sa MSP (dosad) na PSP (odsad)
	switch_sp_to_psp();
 80002be:	f000 f9a5 	bl	800060c <switch_sp_to_psp>
	task1_handler();
 80002c2:	f000 f809 	bl	80002d8 <task1_handler>
    /* Loop forever */
	for(;;);
 80002c6:	bf00      	nop
 80002c8:	e7fd      	b.n	80002c6 <main+0x26>
 80002ca:	bf00      	nop
 80002cc:	2001ec00 	.word	0x2001ec00

080002d0 <idle_task>:
}

void idle_task(void){
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	while(1);
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <idle_task+0x4>

080002d8 <task1_handler>:
}

void task1_handler(void){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_GREEN);
 80002dc:	200c      	movs	r0, #12
 80002de:	f7ff ffad 	bl	800023c <led_on>
		task_delay(1000);
 80002e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002e6:	f000 f9b3 	bl	8000650 <task_delay>
		led_off(LED_GREEN);
 80002ea:	200c      	movs	r0, #12
 80002ec:	f7ff ffbe 	bl	800026c <led_off>
		task_delay(1000);
 80002f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002f4:	f000 f9ac 	bl	8000650 <task_delay>
		led_on(LED_GREEN);
 80002f8:	bf00      	nop
 80002fa:	e7ef      	b.n	80002dc <task1_handler+0x4>

080002fc <task2_handler>:
}

}
void task2_handler(void){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_ORANGE);
 8000300:	200d      	movs	r0, #13
 8000302:	f7ff ff9b 	bl	800023c <led_on>
		task_delay(500);
 8000306:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800030a:	f000 f9a1 	bl	8000650 <task_delay>
		led_off(LED_ORANGE);
 800030e:	200d      	movs	r0, #13
 8000310:	f7ff ffac 	bl	800026c <led_off>
		task_delay(500);
 8000314:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000318:	f000 f99a 	bl	8000650 <task_delay>
		led_on(LED_ORANGE);
 800031c:	bf00      	nop
 800031e:	e7ef      	b.n	8000300 <task2_handler+0x4>

08000320 <task3_handler>:
	}
}
void task3_handler(void){
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_BLUE);
 8000324:	200f      	movs	r0, #15
 8000326:	f7ff ff89 	bl	800023c <led_on>
		task_delay(250);
 800032a:	20fa      	movs	r0, #250	@ 0xfa
 800032c:	f000 f990 	bl	8000650 <task_delay>
		led_off(LED_BLUE);
 8000330:	200f      	movs	r0, #15
 8000332:	f7ff ff9b 	bl	800026c <led_off>
		task_delay(250);	}
 8000336:	20fa      	movs	r0, #250	@ 0xfa
 8000338:	f000 f98a 	bl	8000650 <task_delay>
		led_on(LED_BLUE);
 800033c:	bf00      	nop
 800033e:	e7f1      	b.n	8000324 <task3_handler+0x4>

08000340 <task4_handler>:
}
void task4_handler(void){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_RED);
 8000344:	200e      	movs	r0, #14
 8000346:	f7ff ff79 	bl	800023c <led_on>
		task_delay(125);
 800034a:	207d      	movs	r0, #125	@ 0x7d
 800034c:	f000 f980 	bl	8000650 <task_delay>
		led_off(LED_RED);
 8000350:	200e      	movs	r0, #14
 8000352:	f7ff ff8b 	bl	800026c <led_off>
		task_delay(125);
 8000356:	207d      	movs	r0, #125	@ 0x7d
 8000358:	f000 f97a 	bl	8000650 <task_delay>
		led_on(LED_RED);
 800035c:	bf00      	nop
 800035e:	e7f1      	b.n	8000344 <task4_handler+0x4>

08000360 <init_systick_timer>:
	}
}


void init_systick_timer(uint32_t tick_hz){
 8000360:	b480      	push	{r7}
 8000362:	b087      	sub	sp, #28
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000368:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <init_systick_timer+0x60>)
 800036a:	617b      	str	r3, [r7, #20]
	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 800036c:	4a15      	ldr	r2, [pc, #84]	@ (80003c4 <init_systick_timer+0x64>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	fbb2 f3f3 	udiv	r3, r2, r3
 8000374:	3b01      	subs	r3, #1
 8000376:	613b      	str	r3, [r7, #16]
	//clear value in SRVR
	*pSRVR &= ~(0x00FFFFFFFF);
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
	//load value in SRVR
	*pSRVR |= count_value;
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	693b      	ldr	r3, [r7, #16]
 8000384:	431a      	orrs	r2, r3
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	601a      	str	r2, [r3, #0]
	//do some settings
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <init_systick_timer+0x68>)
 800038c:	60fb      	str	r3, [r7, #12]
	*pSCSR |= 1<<1; // enable tickint for exception
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f043 0202 	orr.w	r2, r3, #2
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	601a      	str	r2, [r3, #0]
	*pSCSR |= 1<<2; // enable the processor's clock
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f043 0204 	orr.w	r2, r3, #4
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	601a      	str	r2, [r3, #0]
	//enable systick
	*pSCSR |= 1; //enalbe the counter
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f043 0201 	orr.w	r2, r3, #1
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	601a      	str	r2, [r3, #0]
}
 80003b2:	bf00      	nop
 80003b4:	371c      	adds	r7, #28
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	e000e014 	.word	0xe000e014
 80003c4:	00f42400 	.word	0x00f42400
 80003c8:	e000e010 	.word	0xe000e010

080003cc <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_top_of_stack){
 80003cc:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": :"r"(scheduler_top_of_stack):);
 80003ce:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80003d2:	4770      	bx	lr
}
 80003d4:	bf00      	nop
	...

080003d8 <init_task_stack>:


void init_task_stack(void){
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
	user_tasks[0].current_state = TASK_READY_STATE;
 80003de:	4b3a      	ldr	r3, [pc, #232]	@ (80004c8 <init_task_stack+0xf0>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 80003e4:	4b38      	ldr	r3, [pc, #224]	@ (80004c8 <init_task_stack+0xf0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 80003ea:	4b37      	ldr	r3, [pc, #220]	@ (80004c8 <init_task_stack+0xf0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 80003f2:	4b35      	ldr	r3, [pc, #212]	@ (80004c8 <init_task_stack+0xf0>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 80003fa:	4b33      	ldr	r3, [pc, #204]	@ (80004c8 <init_task_stack+0xf0>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000402:	4b31      	ldr	r3, [pc, #196]	@ (80004c8 <init_task_stack+0xf0>)
 8000404:	4a31      	ldr	r2, [pc, #196]	@ (80004cc <init_task_stack+0xf4>)
 8000406:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000408:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <init_task_stack+0xf0>)
 800040a:	4a31      	ldr	r2, [pc, #196]	@ (80004d0 <init_task_stack+0xf8>)
 800040c:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 800040e:	4b2e      	ldr	r3, [pc, #184]	@ (80004c8 <init_task_stack+0xf0>)
 8000410:	4a30      	ldr	r2, [pc, #192]	@ (80004d4 <init_task_stack+0xfc>)
 8000412:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000414:	4b2c      	ldr	r3, [pc, #176]	@ (80004c8 <init_task_stack+0xf0>)
 8000416:	4a30      	ldr	r2, [pc, #192]	@ (80004d8 <init_task_stack+0x100>)
 8000418:	631a      	str	r2, [r3, #48]	@ 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 800041a:	4b2b      	ldr	r3, [pc, #172]	@ (80004c8 <init_task_stack+0xf0>)
 800041c:	4a2f      	ldr	r2, [pc, #188]	@ (80004dc <init_task_stack+0x104>)
 800041e:	641a      	str	r2, [r3, #64]	@ 0x40


	user_tasks[0].task_handler = idle_task;
 8000420:	4b29      	ldr	r3, [pc, #164]	@ (80004c8 <init_task_stack+0xf0>)
 8000422:	4a2f      	ldr	r2, [pc, #188]	@ (80004e0 <init_task_stack+0x108>)
 8000424:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 8000426:	4b28      	ldr	r3, [pc, #160]	@ (80004c8 <init_task_stack+0xf0>)
 8000428:	4a2e      	ldr	r2, [pc, #184]	@ (80004e4 <init_task_stack+0x10c>)
 800042a:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 800042c:	4b26      	ldr	r3, [pc, #152]	@ (80004c8 <init_task_stack+0xf0>)
 800042e:	4a2e      	ldr	r2, [pc, #184]	@ (80004e8 <init_task_stack+0x110>)
 8000430:	62da      	str	r2, [r3, #44]	@ 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000432:	4b25      	ldr	r3, [pc, #148]	@ (80004c8 <init_task_stack+0xf0>)
 8000434:	4a2d      	ldr	r2, [pc, #180]	@ (80004ec <init_task_stack+0x114>)
 8000436:	63da      	str	r2, [r3, #60]	@ 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000438:	4b23      	ldr	r3, [pc, #140]	@ (80004c8 <init_task_stack+0xf0>)
 800043a:	4a2d      	ldr	r2, [pc, #180]	@ (80004f0 <init_task_stack+0x118>)
 800043c:	64da      	str	r2, [r3, #76]	@ 0x4c

	uint32_t *pPSP;
	//ovdje cu za svaku iteraciju popuniti dummy frame za svaki task
	for(int i=0; i< MAX_TASKS; i++){
 800043e:	2300      	movs	r3, #0
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	e037      	b.n	80004b4 <init_task_stack+0xdc>
		pPSP = (uint32_t*)user_tasks[i].psp_value; // a pspoftasks je niz adresa taskova 1 2 3 4
 8000444:	4a20      	ldr	r2, [pc, #128]	@ (80004c8 <init_task_stack+0xf0>)
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	011b      	lsls	r3, r3, #4
 800044a:	4413      	add	r3, r2
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	60fb      	str	r3, [r7, #12]
		pPSP--;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	3b04      	subs	r3, #4
 8000454:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //xPSR
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800045c:	601a      	str	r2, [r3, #0]
		pPSP--;
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	3b04      	subs	r3, #4
 8000462:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)user_tasks[i].task_handler; //PC, task_hanledr[0] je task handler1 njegova fja
 8000464:	4a18      	ldr	r2, [pc, #96]	@ (80004c8 <init_task_stack+0xf0>)
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	011b      	lsls	r3, r3, #4
 800046a:	4413      	add	r3, r2
 800046c:	330c      	adds	r3, #12
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	601a      	str	r2, [r3, #0]
		pPSP--;
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	3b04      	subs	r3, #4
 800047a:	60fb      	str	r3, [r7, #12]
		*pPSP = 0XFFFFFFFD; //LR
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f06f 0202 	mvn.w	r2, #2
 8000482:	601a      	str	r2, [r3, #0]
		//ovo ispod su sve ostale koje mogu biti 0, ukupno 13 njih
		for(int j = 0; j<13; j++){
 8000484:	2300      	movs	r3, #0
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	e008      	b.n	800049c <init_task_stack+0xc4>
			pPSP--;
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	3b04      	subs	r3, #4
 800048e:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
		for(int j = 0; j<13; j++){
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3301      	adds	r3, #1
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b0c      	cmp	r3, #12
 80004a0:	ddf3      	ble.n	800048a <init_task_stack+0xb2>
		}
		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	4908      	ldr	r1, [pc, #32]	@ (80004c8 <init_task_stack+0xf0>)
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	011b      	lsls	r3, r3, #4
 80004aa:	440b      	add	r3, r1
 80004ac:	601a      	str	r2, [r3, #0]
	for(int i=0; i< MAX_TASKS; i++){
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	3301      	adds	r3, #1
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	2b04      	cmp	r3, #4
 80004b8:	ddc4      	ble.n	8000444 <init_task_stack+0x6c>
	}
}
 80004ba:	bf00      	nop
 80004bc:	bf00      	nop
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	20000080 	.word	0x20000080
 80004cc:	2001f000 	.word	0x2001f000
 80004d0:	20020000 	.word	0x20020000
 80004d4:	2001fc00 	.word	0x2001fc00
 80004d8:	2001f800 	.word	0x2001f800
 80004dc:	2001f400 	.word	0x2001f400
 80004e0:	080002d1 	.word	0x080002d1
 80004e4:	080002d9 	.word	0x080002d9
 80004e8:	080002fd 	.word	0x080002fd
 80004ec:	08000321 	.word	0x08000321
 80004f0:	08000341 	.word	0x08000341

080004f4 <enable_processor_faults>:

void enable_processor_faults(void){
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80004fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000530 <enable_processor_faults+0x3c>)
 80004fc:	607b      	str	r3, [r7, #4]
	*pSHCSR |= (1<<16);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<17);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<18);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	601a      	str	r2, [r3, #0]

}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000ed24 	.word	0xe000ed24

08000534 <get_psp_value>:

uint32_t get_psp_value(){
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value; //return value iz callee je uvijek smjestana u r0
 8000538:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <get_psp_value+0x1c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4a05      	ldr	r2, [pc, #20]	@ (8000554 <get_psp_value+0x20>)
 800053e:	011b      	lsls	r3, r3, #4
 8000540:	4413      	add	r3, r2
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000000 	.word	0x20000000
 8000554:	20000080 	.word	0x20000080

08000558 <save_psp_value>:

uint32_t save_psp_value(uint32_t current_psp){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp;
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <save_psp_value+0x24>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4a06      	ldr	r2, [pc, #24]	@ (8000580 <save_psp_value+0x28>)
 8000566:	011b      	lsls	r3, r3, #4
 8000568:	4413      	add	r3, r2
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
}
 800056e:	bf00      	nop
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	20000000 	.word	0x20000000
 8000580:	20000080 	.word	0x20000080

08000584 <update_next_task>:

void update_next_task(void){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKER_STATE;
 800058a:	23ff      	movs	r3, #255	@ 0xff
 800058c:	607b      	str	r3, [r7, #4]
	for(int i=0; i<MAX_TASKS; i++){
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	e024      	b.n	80005de <update_next_task+0x5a>
		current_task++;
 8000594:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <update_next_task+0x7c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	b2da      	uxtb	r2, r3
 800059c:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <update_next_task+0x7c>)
 800059e:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASKS;
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <update_next_task+0x7c>)
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <update_next_task+0x80>)
 80005a6:	fba3 1302 	umull	r1, r3, r3, r2
 80005aa:	0899      	lsrs	r1, r3, #2
 80005ac:	460b      	mov	r3, r1
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	440b      	add	r3, r1
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <update_next_task+0x7c>)
 80005b8:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <update_next_task+0x7c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <update_next_task+0x84>)
 80005c0:	011b      	lsls	r3, r3, #4
 80005c2:	4413      	add	r3, r2
 80005c4:	3308      	adds	r3, #8
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	607b      	str	r3, [r7, #4]
		if((state == TASK_READY_STATE) && (current_task != 0)){
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d103      	bne.n	80005d8 <update_next_task+0x54>
 80005d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <update_next_task+0x7c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d106      	bne.n	80005e6 <update_next_task+0x62>
	for(int i=0; i<MAX_TASKS; i++){
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	ddd7      	ble.n	8000594 <update_next_task+0x10>
 80005e4:	e000      	b.n	80005e8 <update_next_task+0x64>
			break;
 80005e6:	bf00      	nop
		}
	}
	if(state != TASK_READY_STATE){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <update_next_task+0x70>
		current_task = 0;
 80005ee:	4b04      	ldr	r3, [pc, #16]	@ (8000600 <update_next_task+0x7c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
	}

}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	20000000 	.word	0x20000000
 8000604:	cccccccd 	.word	0xcccccccd
 8000608:	20000080 	.word	0x20000080

0800060c <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	//prvo uvijek inicijalizacija psp sa task1 start stack address
	//get value of current_task
	__asm volatile("PUSH {LR}");
 800060c:	b500      	push	{lr}
	__asm volatile("BL get_psp_value"); // BL zato sto se vracamo posle u ovo funkciju!
 800060e:	f7ff ff91 	bl	8000534 <get_psp_value>
	__asm volatile("MSR PSP, R0");
 8000612:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000616:	f85d eb04 	ldr.w	lr, [sp], #4
	//promijeni sp to psp pomocu control registra
	__asm volatile("MOV R0, 0x02");
 800061a:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 800061e:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 8000622:	4770      	bx	lr
}
 8000624:	bf00      	nop
	...

08000628 <schedule>:

void schedule(void){
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800062e:	4b07      	ldr	r3, [pc, #28]	@ (800064c <schedule+0x24>)
 8000630:	607b      	str	r3, [r7, #4]
	*pICSR |= 1<<28; //pend the pendsv exception
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	601a      	str	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed04 	.word	0xe000ed04

08000650 <task_delay>:


void task_delay(uint32_t tick_count){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

	INTERUPT_DISABLE();
 8000658:	f04f 0001 	mov.w	r0, #1
 800065c:	f380 8810 	msr	PRIMASK, r0
	if(current_task){ //ako je current task 0 onda je idle i ne treba ga dirati, zato ovo radimo samo ako nije 0
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <task_delay+0x54>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d015      	beq.n	8000694 <task_delay+0x44>
		user_tasks[current_task].block_count = g_tick_count + tick_count;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <task_delay+0x58>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <task_delay+0x54>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	441a      	add	r2, r3
 8000676:	490d      	ldr	r1, [pc, #52]	@ (80006ac <task_delay+0x5c>)
 8000678:	0103      	lsls	r3, r0, #4
 800067a:	440b      	add	r3, r1
 800067c:	3304      	adds	r3, #4
 800067e:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKER_STATE;
 8000680:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <task_delay+0x54>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4a09      	ldr	r2, [pc, #36]	@ (80006ac <task_delay+0x5c>)
 8000686:	011b      	lsls	r3, r3, #4
 8000688:	4413      	add	r3, r2
 800068a:	3308      	adds	r3, #8
 800068c:	22ff      	movs	r2, #255	@ 0xff
 800068e:	701a      	strb	r2, [r3, #0]
		schedule(); // allow other tasks to run by triggering pendsv here
 8000690:	f7ff ffca 	bl	8000628 <schedule>
	}

	INTERUPT_ENABLE();
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	f380 8810 	msr	PRIMASK, r0
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000000 	.word	0x20000000
 80006a8:	2000007c 	.word	0x2000007c
 80006ac:	20000080 	.word	0x20000080

080006b0 <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void){
	//save the context of current task

	//1. get current running task's PSP value
	__asm volatile("MRS R0, PSP");
 80006b0:	f3ef 8009 	mrs	r0, PSP
	//2.using that PSP value store SF2(R4 to R11)
	__asm volatile("STMDB R0!, {R4 - R11}");   //decrement before, imitation of push in handlers
 80006b4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("PUSH {LR}");
 80006b8:	b500      	push	{lr}

	//3. Save the current value of PSP
	__asm volatile("BL save_psp_value");
 80006ba:	f7ff ff4d 	bl	8000558 <save_psp_value>

	//retrieve the context of next  task

	//1. Decide the next task
	__asm volatile("BL update_next_task");
 80006be:	f7ff ff61 	bl	8000584 <update_next_task>
	//2. get it's past psp value

	__asm volatile("BL get_psp_value");
 80006c2:	f7ff ff37 	bl	8000534 <get_psp_value>
	//3. Using that psp value retrieve SF2(r4-r11)
	__asm volatile("LDMIA R0!, {R4-R11}");  //! je da bih update R0 pokazivac, kad god je load
 80006c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//4.update PSP and exit
	__asm volatile("MSR PSP, R0");
 80006ca:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 80006ce:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 80006d2:	4770      	bx	lr
}
 80006d4:	bf00      	nop
	...

080006d8 <update_global_tick_count>:

void update_global_tick_count(void){
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	g_tick_count++;
 80006dc:	4b04      	ldr	r3, [pc, #16]	@ (80006f0 <update_global_tick_count+0x18>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a03      	ldr	r2, [pc, #12]	@ (80006f0 <update_global_tick_count+0x18>)
 80006e4:	6013      	str	r3, [r2, #0]
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	2000007c 	.word	0x2000007c

080006f4 <unblock_tasks>:

void unblock_tasks(void){
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
	for(int i=1; i<MAX_TASKS; i++){ //i polazi od 1 zato sto je idle (0) uvijek running
 80006fa:	2301      	movs	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	e01b      	b.n	8000738 <unblock_tasks+0x44>
		if(user_tasks[i].current_state != TASK_READY_STATE){
 8000700:	4a12      	ldr	r2, [pc, #72]	@ (800074c <unblock_tasks+0x58>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	011b      	lsls	r3, r3, #4
 8000706:	4413      	add	r3, r2
 8000708:	3308      	adds	r3, #8
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d010      	beq.n	8000732 <unblock_tasks+0x3e>
			if(user_tasks[i].block_count == g_tick_count){
 8000710:	4a0e      	ldr	r2, [pc, #56]	@ (800074c <unblock_tasks+0x58>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	4413      	add	r3, r2
 8000718:	3304      	adds	r3, #4
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <unblock_tasks+0x5c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d106      	bne.n	8000732 <unblock_tasks+0x3e>
				user_tasks[i].current_state = TASK_READY_STATE;
 8000724:	4a09      	ldr	r2, [pc, #36]	@ (800074c <unblock_tasks+0x58>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	4413      	add	r3, r2
 800072c:	3308      	adds	r3, #8
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<MAX_TASKS; i++){ //i polazi od 1 zato sto je idle (0) uvijek running
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3301      	adds	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b04      	cmp	r3, #4
 800073c:	dde0      	ble.n	8000700 <unblock_tasks+0xc>
			}
		}
	}
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	20000080 	.word	0x20000080
 8000750:	2000007c 	.word	0x2000007c

08000754 <SysTick_Handler>:

void SysTick_Handler(void){
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <SysTick_Handler+0x28>)
 800075c:	607b      	str	r3, [r7, #4]
	*pICSR |= 1<<28; //pend the pendsv exception
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]
	update_global_tick_count();
 800076a:	f7ff ffb5 	bl	80006d8 <update_global_tick_count>
	unblock_tasks();
 800076e:	f7ff ffc1 	bl	80006f4 <unblock_tasks>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	e000ed04 	.word	0xe000ed04

08000780 <HardFault_Handler>:

//fault handlers:
void HardFault_Handler(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	printf("Exception: Hard Fault\n");
 8000784:	4802      	ldr	r0, [pc, #8]	@ (8000790 <HardFault_Handler+0x10>)
 8000786:	f000 fa27 	bl	8000bd8 <puts>
	while(1);
 800078a:	bf00      	nop
 800078c:	e7fd      	b.n	800078a <HardFault_Handler+0xa>
 800078e:	bf00      	nop
 8000790:	08001318 	.word	0x08001318

08000794 <MemManage_Handler>:
}

void MemManage_Handler(void){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	printf("Exception: Mem Manage\n");
 8000798:	4802      	ldr	r0, [pc, #8]	@ (80007a4 <MemManage_Handler+0x10>)
 800079a:	f000 fa1d 	bl	8000bd8 <puts>
	while(1);
 800079e:	bf00      	nop
 80007a0:	e7fd      	b.n	800079e <MemManage_Handler+0xa>
 80007a2:	bf00      	nop
 80007a4:	08001330 	.word	0x08001330

080007a8 <BusFault_Handler>:
}

void BusFault_Handler(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	printf("Exception: Bus fault\n");
 80007ac:	4802      	ldr	r0, [pc, #8]	@ (80007b8 <BusFault_Handler+0x10>)
 80007ae:	f000 fa13 	bl	8000bd8 <puts>
	while(1);
 80007b2:	bf00      	nop
 80007b4:	e7fd      	b.n	80007b2 <BusFault_Handler+0xa>
 80007b6:	bf00      	nop
 80007b8:	08001348 	.word	0x08001348

080007bc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <ITM_SendChar+0x48>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000804 <ITM_SendChar+0x48>)
 80007cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007d0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <ITM_SendChar+0x4c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000808 <ITM_SendChar+0x4c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007de:	bf00      	nop
 80007e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f8      	beq.n	80007e0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007ee:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	6013      	str	r3, [r2, #0]
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000edfc 	.word	0xe000edfc
 8000808:	e0000e00 	.word	0xe0000e00

0800080c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	e00a      	b.n	8000834 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800081e:	f3af 8000 	nop.w
 8000822:	4601      	mov	r1, r0
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	60ba      	str	r2, [r7, #8]
 800082a:	b2ca      	uxtb	r2, r1
 800082c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3301      	adds	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	429a      	cmp	r2, r3
 800083a:	dbf0      	blt.n	800081e <_read+0x12>
  }

  return len;
 800083c:	687b      	ldr	r3, [r7, #4]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	e009      	b.n	800086c <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	60ba      	str	r2, [r7, #8]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ffab 	bl	80007bc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf1      	blt.n	8000858 <_write+0x12>
  }
  return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_close>:

int _close(int file)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008a6:	605a      	str	r2, [r3, #4]
  return 0;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <_isatty>:

int _isatty(int file)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f0:	4a14      	ldr	r2, [pc, #80]	@ (8000944 <_sbrk+0x5c>)
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <_sbrk+0x60>)
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008fc:	4b13      	ldr	r3, [pc, #76]	@ (800094c <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <_sbrk+0x64>)
 8000906:	4a12      	ldr	r2, [pc, #72]	@ (8000950 <_sbrk+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	429a      	cmp	r2, r3
 8000916:	d207      	bcs.n	8000928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000918:	f000 fa8c 	bl	8000e34 <__errno>
 800091c:	4603      	mov	r3, r0
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	e009      	b.n	800093c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000928:	4b08      	ldr	r3, [pc, #32]	@ (800094c <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092e:	4b07      	ldr	r3, [pc, #28]	@ (800094c <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	4a05      	ldr	r2, [pc, #20]	@ (800094c <_sbrk+0x64>)
 8000938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20020000 	.word	0x20020000
 8000948:	00000400 	.word	0x00000400
 800094c:	200000d0 	.word	0x200000d0
 8000950:	20000220 	.word	0x20000220

08000954 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000954:	480d      	ldr	r0, [pc, #52]	@ (800098c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000956:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000958:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <LoopForever+0x6>)
  ldr r1, =_edata
 800095e:	490d      	ldr	r1, [pc, #52]	@ (8000994 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000960:	4a0d      	ldr	r2, [pc, #52]	@ (8000998 <LoopForever+0xe>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000974:	4c0a      	ldr	r4, [pc, #40]	@ (80009a0 <LoopForever+0x16>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000982:	f000 fa5d 	bl	8000e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000986:	f7ff fc8b 	bl	80002a0 <main>

0800098a <LoopForever>:

LoopForever:
  b LoopForever
 800098a:	e7fe      	b.n	800098a <LoopForever>
  ldr   r0, =_estack
 800098c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000998:	08001368 	.word	0x08001368
  ldr r2, =_sbss
 800099c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009a0:	20000220 	.word	0x20000220

080009a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC_IRQHandler>
	...

080009a8 <std>:
 80009a8:	2300      	movs	r3, #0
 80009aa:	b510      	push	{r4, lr}
 80009ac:	4604      	mov	r4, r0
 80009ae:	e9c0 3300 	strd	r3, r3, [r0]
 80009b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009b6:	6083      	str	r3, [r0, #8]
 80009b8:	8181      	strh	r1, [r0, #12]
 80009ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80009bc:	81c2      	strh	r2, [r0, #14]
 80009be:	6183      	str	r3, [r0, #24]
 80009c0:	4619      	mov	r1, r3
 80009c2:	2208      	movs	r2, #8
 80009c4:	305c      	adds	r0, #92	@ 0x5c
 80009c6:	f000 f9e7 	bl	8000d98 <memset>
 80009ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <std+0x58>)
 80009cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <std+0x5c>)
 80009d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <std+0x60>)
 80009d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <std+0x64>)
 80009d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <std+0x68>)
 80009dc:	6224      	str	r4, [r4, #32]
 80009de:	429c      	cmp	r4, r3
 80009e0:	d006      	beq.n	80009f0 <std+0x48>
 80009e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80009e6:	4294      	cmp	r4, r2
 80009e8:	d002      	beq.n	80009f0 <std+0x48>
 80009ea:	33d0      	adds	r3, #208	@ 0xd0
 80009ec:	429c      	cmp	r4, r3
 80009ee:	d105      	bne.n	80009fc <std+0x54>
 80009f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80009f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009f8:	f000 ba46 	b.w	8000e88 <__retarget_lock_init_recursive>
 80009fc:	bd10      	pop	{r4, pc}
 80009fe:	bf00      	nop
 8000a00:	08000be9 	.word	0x08000be9
 8000a04:	08000c0b 	.word	0x08000c0b
 8000a08:	08000c43 	.word	0x08000c43
 8000a0c:	08000c67 	.word	0x08000c67
 8000a10:	200000d4 	.word	0x200000d4

08000a14 <stdio_exit_handler>:
 8000a14:	4a02      	ldr	r2, [pc, #8]	@ (8000a20 <stdio_exit_handler+0xc>)
 8000a16:	4903      	ldr	r1, [pc, #12]	@ (8000a24 <stdio_exit_handler+0x10>)
 8000a18:	4803      	ldr	r0, [pc, #12]	@ (8000a28 <stdio_exit_handler+0x14>)
 8000a1a:	f000 b869 	b.w	8000af0 <_fwalk_sglue>
 8000a1e:	bf00      	nop
 8000a20:	20000004 	.word	0x20000004
 8000a24:	08001189 	.word	0x08001189
 8000a28:	20000014 	.word	0x20000014

08000a2c <cleanup_stdio>:
 8000a2c:	6841      	ldr	r1, [r0, #4]
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <cleanup_stdio+0x34>)
 8000a30:	4299      	cmp	r1, r3
 8000a32:	b510      	push	{r4, lr}
 8000a34:	4604      	mov	r4, r0
 8000a36:	d001      	beq.n	8000a3c <cleanup_stdio+0x10>
 8000a38:	f000 fba6 	bl	8001188 <_fflush_r>
 8000a3c:	68a1      	ldr	r1, [r4, #8]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <cleanup_stdio+0x38>)
 8000a40:	4299      	cmp	r1, r3
 8000a42:	d002      	beq.n	8000a4a <cleanup_stdio+0x1e>
 8000a44:	4620      	mov	r0, r4
 8000a46:	f000 fb9f 	bl	8001188 <_fflush_r>
 8000a4a:	68e1      	ldr	r1, [r4, #12]
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <cleanup_stdio+0x3c>)
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	d004      	beq.n	8000a5c <cleanup_stdio+0x30>
 8000a52:	4620      	mov	r0, r4
 8000a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a58:	f000 bb96 	b.w	8001188 <_fflush_r>
 8000a5c:	bd10      	pop	{r4, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000d4 	.word	0x200000d4
 8000a64:	2000013c 	.word	0x2000013c
 8000a68:	200001a4 	.word	0x200001a4

08000a6c <global_stdio_init.part.0>:
 8000a6c:	b510      	push	{r4, lr}
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <global_stdio_init.part.0+0x30>)
 8000a70:	4c0b      	ldr	r4, [pc, #44]	@ (8000aa0 <global_stdio_init.part.0+0x34>)
 8000a72:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <global_stdio_init.part.0+0x38>)
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	4620      	mov	r0, r4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	f7ff ff94 	bl	80009a8 <std>
 8000a80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000a84:	2201      	movs	r2, #1
 8000a86:	2109      	movs	r1, #9
 8000a88:	f7ff ff8e 	bl	80009a8 <std>
 8000a8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000a90:	2202      	movs	r2, #2
 8000a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a96:	2112      	movs	r1, #18
 8000a98:	f7ff bf86 	b.w	80009a8 <std>
 8000a9c:	2000020c 	.word	0x2000020c
 8000aa0:	200000d4 	.word	0x200000d4
 8000aa4:	08000a15 	.word	0x08000a15

08000aa8 <__sfp_lock_acquire>:
 8000aa8:	4801      	ldr	r0, [pc, #4]	@ (8000ab0 <__sfp_lock_acquire+0x8>)
 8000aaa:	f000 b9ee 	b.w	8000e8a <__retarget_lock_acquire_recursive>
 8000aae:	bf00      	nop
 8000ab0:	20000215 	.word	0x20000215

08000ab4 <__sfp_lock_release>:
 8000ab4:	4801      	ldr	r0, [pc, #4]	@ (8000abc <__sfp_lock_release+0x8>)
 8000ab6:	f000 b9e9 	b.w	8000e8c <__retarget_lock_release_recursive>
 8000aba:	bf00      	nop
 8000abc:	20000215 	.word	0x20000215

08000ac0 <__sinit>:
 8000ac0:	b510      	push	{r4, lr}
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	f7ff fff0 	bl	8000aa8 <__sfp_lock_acquire>
 8000ac8:	6a23      	ldr	r3, [r4, #32]
 8000aca:	b11b      	cbz	r3, 8000ad4 <__sinit+0x14>
 8000acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ad0:	f7ff bff0 	b.w	8000ab4 <__sfp_lock_release>
 8000ad4:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <__sinit+0x28>)
 8000ad6:	6223      	str	r3, [r4, #32]
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <__sinit+0x2c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1f5      	bne.n	8000acc <__sinit+0xc>
 8000ae0:	f7ff ffc4 	bl	8000a6c <global_stdio_init.part.0>
 8000ae4:	e7f2      	b.n	8000acc <__sinit+0xc>
 8000ae6:	bf00      	nop
 8000ae8:	08000a2d 	.word	0x08000a2d
 8000aec:	2000020c 	.word	0x2000020c

08000af0 <_fwalk_sglue>:
 8000af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000af4:	4607      	mov	r7, r0
 8000af6:	4688      	mov	r8, r1
 8000af8:	4614      	mov	r4, r2
 8000afa:	2600      	movs	r6, #0
 8000afc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b00:	f1b9 0901 	subs.w	r9, r9, #1
 8000b04:	d505      	bpl.n	8000b12 <_fwalk_sglue+0x22>
 8000b06:	6824      	ldr	r4, [r4, #0]
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d1f7      	bne.n	8000afc <_fwalk_sglue+0xc>
 8000b0c:	4630      	mov	r0, r6
 8000b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b12:	89ab      	ldrh	r3, [r5, #12]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d907      	bls.n	8000b28 <_fwalk_sglue+0x38>
 8000b18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	d003      	beq.n	8000b28 <_fwalk_sglue+0x38>
 8000b20:	4629      	mov	r1, r5
 8000b22:	4638      	mov	r0, r7
 8000b24:	47c0      	blx	r8
 8000b26:	4306      	orrs	r6, r0
 8000b28:	3568      	adds	r5, #104	@ 0x68
 8000b2a:	e7e9      	b.n	8000b00 <_fwalk_sglue+0x10>

08000b2c <_puts_r>:
 8000b2c:	6a03      	ldr	r3, [r0, #32]
 8000b2e:	b570      	push	{r4, r5, r6, lr}
 8000b30:	6884      	ldr	r4, [r0, #8]
 8000b32:	4605      	mov	r5, r0
 8000b34:	460e      	mov	r6, r1
 8000b36:	b90b      	cbnz	r3, 8000b3c <_puts_r+0x10>
 8000b38:	f7ff ffc2 	bl	8000ac0 <__sinit>
 8000b3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b3e:	07db      	lsls	r3, r3, #31
 8000b40:	d405      	bmi.n	8000b4e <_puts_r+0x22>
 8000b42:	89a3      	ldrh	r3, [r4, #12]
 8000b44:	0598      	lsls	r0, r3, #22
 8000b46:	d402      	bmi.n	8000b4e <_puts_r+0x22>
 8000b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b4a:	f000 f99e 	bl	8000e8a <__retarget_lock_acquire_recursive>
 8000b4e:	89a3      	ldrh	r3, [r4, #12]
 8000b50:	0719      	lsls	r1, r3, #28
 8000b52:	d502      	bpl.n	8000b5a <_puts_r+0x2e>
 8000b54:	6923      	ldr	r3, [r4, #16]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d135      	bne.n	8000bc6 <_puts_r+0x9a>
 8000b5a:	4621      	mov	r1, r4
 8000b5c:	4628      	mov	r0, r5
 8000b5e:	f000 f8c5 	bl	8000cec <__swsetup_r>
 8000b62:	b380      	cbz	r0, 8000bc6 <_puts_r+0x9a>
 8000b64:	f04f 35ff 	mov.w	r5, #4294967295
 8000b68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b6a:	07da      	lsls	r2, r3, #31
 8000b6c:	d405      	bmi.n	8000b7a <_puts_r+0x4e>
 8000b6e:	89a3      	ldrh	r3, [r4, #12]
 8000b70:	059b      	lsls	r3, r3, #22
 8000b72:	d402      	bmi.n	8000b7a <_puts_r+0x4e>
 8000b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b76:	f000 f989 	bl	8000e8c <__retarget_lock_release_recursive>
 8000b7a:	4628      	mov	r0, r5
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	da04      	bge.n	8000b8c <_puts_r+0x60>
 8000b82:	69a2      	ldr	r2, [r4, #24]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dc17      	bgt.n	8000bb8 <_puts_r+0x8c>
 8000b88:	290a      	cmp	r1, #10
 8000b8a:	d015      	beq.n	8000bb8 <_puts_r+0x8c>
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	6022      	str	r2, [r4, #0]
 8000b92:	7019      	strb	r1, [r3, #0]
 8000b94:	68a3      	ldr	r3, [r4, #8]
 8000b96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	60a3      	str	r3, [r4, #8]
 8000b9e:	2900      	cmp	r1, #0
 8000ba0:	d1ed      	bne.n	8000b7e <_puts_r+0x52>
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	da11      	bge.n	8000bca <_puts_r+0x9e>
 8000ba6:	4622      	mov	r2, r4
 8000ba8:	210a      	movs	r1, #10
 8000baa:	4628      	mov	r0, r5
 8000bac:	f000 f85f 	bl	8000c6e <__swbuf_r>
 8000bb0:	3001      	adds	r0, #1
 8000bb2:	d0d7      	beq.n	8000b64 <_puts_r+0x38>
 8000bb4:	250a      	movs	r5, #10
 8000bb6:	e7d7      	b.n	8000b68 <_puts_r+0x3c>
 8000bb8:	4622      	mov	r2, r4
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f000 f857 	bl	8000c6e <__swbuf_r>
 8000bc0:	3001      	adds	r0, #1
 8000bc2:	d1e7      	bne.n	8000b94 <_puts_r+0x68>
 8000bc4:	e7ce      	b.n	8000b64 <_puts_r+0x38>
 8000bc6:	3e01      	subs	r6, #1
 8000bc8:	e7e4      	b.n	8000b94 <_puts_r+0x68>
 8000bca:	6823      	ldr	r3, [r4, #0]
 8000bcc:	1c5a      	adds	r2, r3, #1
 8000bce:	6022      	str	r2, [r4, #0]
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	e7ee      	b.n	8000bb4 <_puts_r+0x88>
	...

08000bd8 <puts>:
 8000bd8:	4b02      	ldr	r3, [pc, #8]	@ (8000be4 <puts+0xc>)
 8000bda:	4601      	mov	r1, r0
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	f7ff bfa5 	b.w	8000b2c <_puts_r>
 8000be2:	bf00      	nop
 8000be4:	20000010 	.word	0x20000010

08000be8 <__sread>:
 8000be8:	b510      	push	{r4, lr}
 8000bea:	460c      	mov	r4, r1
 8000bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bf0:	f000 f8fc 	bl	8000dec <_read_r>
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	bfab      	itete	ge
 8000bf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8000bfc:	181b      	addge	r3, r3, r0
 8000bfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000c02:	bfac      	ite	ge
 8000c04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000c06:	81a3      	strhlt	r3, [r4, #12]
 8000c08:	bd10      	pop	{r4, pc}

08000c0a <__swrite>:
 8000c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c0e:	461f      	mov	r7, r3
 8000c10:	898b      	ldrh	r3, [r1, #12]
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	4605      	mov	r5, r0
 8000c16:	460c      	mov	r4, r1
 8000c18:	4616      	mov	r6, r2
 8000c1a:	d505      	bpl.n	8000c28 <__swrite+0x1e>
 8000c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c20:	2302      	movs	r3, #2
 8000c22:	2200      	movs	r2, #0
 8000c24:	f000 f8d0 	bl	8000dc8 <_lseek_r>
 8000c28:	89a3      	ldrh	r3, [r4, #12]
 8000c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c32:	81a3      	strh	r3, [r4, #12]
 8000c34:	4632      	mov	r2, r6
 8000c36:	463b      	mov	r3, r7
 8000c38:	4628      	mov	r0, r5
 8000c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c3e:	f000 b8e7 	b.w	8000e10 <_write_r>

08000c42 <__sseek>:
 8000c42:	b510      	push	{r4, lr}
 8000c44:	460c      	mov	r4, r1
 8000c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c4a:	f000 f8bd 	bl	8000dc8 <_lseek_r>
 8000c4e:	1c43      	adds	r3, r0, #1
 8000c50:	89a3      	ldrh	r3, [r4, #12]
 8000c52:	bf15      	itete	ne
 8000c54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000c56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000c5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000c5e:	81a3      	strheq	r3, [r4, #12]
 8000c60:	bf18      	it	ne
 8000c62:	81a3      	strhne	r3, [r4, #12]
 8000c64:	bd10      	pop	{r4, pc}

08000c66 <__sclose>:
 8000c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c6a:	f000 b89d 	b.w	8000da8 <_close_r>

08000c6e <__swbuf_r>:
 8000c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c70:	460e      	mov	r6, r1
 8000c72:	4614      	mov	r4, r2
 8000c74:	4605      	mov	r5, r0
 8000c76:	b118      	cbz	r0, 8000c80 <__swbuf_r+0x12>
 8000c78:	6a03      	ldr	r3, [r0, #32]
 8000c7a:	b90b      	cbnz	r3, 8000c80 <__swbuf_r+0x12>
 8000c7c:	f7ff ff20 	bl	8000ac0 <__sinit>
 8000c80:	69a3      	ldr	r3, [r4, #24]
 8000c82:	60a3      	str	r3, [r4, #8]
 8000c84:	89a3      	ldrh	r3, [r4, #12]
 8000c86:	071a      	lsls	r2, r3, #28
 8000c88:	d501      	bpl.n	8000c8e <__swbuf_r+0x20>
 8000c8a:	6923      	ldr	r3, [r4, #16]
 8000c8c:	b943      	cbnz	r3, 8000ca0 <__swbuf_r+0x32>
 8000c8e:	4621      	mov	r1, r4
 8000c90:	4628      	mov	r0, r5
 8000c92:	f000 f82b 	bl	8000cec <__swsetup_r>
 8000c96:	b118      	cbz	r0, 8000ca0 <__swbuf_r+0x32>
 8000c98:	f04f 37ff 	mov.w	r7, #4294967295
 8000c9c:	4638      	mov	r0, r7
 8000c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ca0:	6823      	ldr	r3, [r4, #0]
 8000ca2:	6922      	ldr	r2, [r4, #16]
 8000ca4:	1a98      	subs	r0, r3, r2
 8000ca6:	6963      	ldr	r3, [r4, #20]
 8000ca8:	b2f6      	uxtb	r6, r6
 8000caa:	4283      	cmp	r3, r0
 8000cac:	4637      	mov	r7, r6
 8000cae:	dc05      	bgt.n	8000cbc <__swbuf_r+0x4e>
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	f000 fa68 	bl	8001188 <_fflush_r>
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	d1ed      	bne.n	8000c98 <__swbuf_r+0x2a>
 8000cbc:	68a3      	ldr	r3, [r4, #8]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	60a3      	str	r3, [r4, #8]
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	1c5a      	adds	r2, r3, #1
 8000cc6:	6022      	str	r2, [r4, #0]
 8000cc8:	701e      	strb	r6, [r3, #0]
 8000cca:	6962      	ldr	r2, [r4, #20]
 8000ccc:	1c43      	adds	r3, r0, #1
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__swbuf_r+0x6e>
 8000cd2:	89a3      	ldrh	r3, [r4, #12]
 8000cd4:	07db      	lsls	r3, r3, #31
 8000cd6:	d5e1      	bpl.n	8000c9c <__swbuf_r+0x2e>
 8000cd8:	2e0a      	cmp	r6, #10
 8000cda:	d1df      	bne.n	8000c9c <__swbuf_r+0x2e>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	4628      	mov	r0, r5
 8000ce0:	f000 fa52 	bl	8001188 <_fflush_r>
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	d0d9      	beq.n	8000c9c <__swbuf_r+0x2e>
 8000ce8:	e7d6      	b.n	8000c98 <__swbuf_r+0x2a>
	...

08000cec <__swsetup_r>:
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	4b29      	ldr	r3, [pc, #164]	@ (8000d94 <__swsetup_r+0xa8>)
 8000cf0:	4605      	mov	r5, r0
 8000cf2:	6818      	ldr	r0, [r3, #0]
 8000cf4:	460c      	mov	r4, r1
 8000cf6:	b118      	cbz	r0, 8000d00 <__swsetup_r+0x14>
 8000cf8:	6a03      	ldr	r3, [r0, #32]
 8000cfa:	b90b      	cbnz	r3, 8000d00 <__swsetup_r+0x14>
 8000cfc:	f7ff fee0 	bl	8000ac0 <__sinit>
 8000d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d04:	0719      	lsls	r1, r3, #28
 8000d06:	d422      	bmi.n	8000d4e <__swsetup_r+0x62>
 8000d08:	06da      	lsls	r2, r3, #27
 8000d0a:	d407      	bmi.n	8000d1c <__swsetup_r+0x30>
 8000d0c:	2209      	movs	r2, #9
 8000d0e:	602a      	str	r2, [r5, #0]
 8000d10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d14:	81a3      	strh	r3, [r4, #12]
 8000d16:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1a:	e033      	b.n	8000d84 <__swsetup_r+0x98>
 8000d1c:	0758      	lsls	r0, r3, #29
 8000d1e:	d512      	bpl.n	8000d46 <__swsetup_r+0x5a>
 8000d20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d22:	b141      	cbz	r1, 8000d36 <__swsetup_r+0x4a>
 8000d24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d002      	beq.n	8000d32 <__swsetup_r+0x46>
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	f000 f8af 	bl	8000e90 <_free_r>
 8000d32:	2300      	movs	r3, #0
 8000d34:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d36:	89a3      	ldrh	r3, [r4, #12]
 8000d38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000d3c:	81a3      	strh	r3, [r4, #12]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	6063      	str	r3, [r4, #4]
 8000d42:	6923      	ldr	r3, [r4, #16]
 8000d44:	6023      	str	r3, [r4, #0]
 8000d46:	89a3      	ldrh	r3, [r4, #12]
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	81a3      	strh	r3, [r4, #12]
 8000d4e:	6923      	ldr	r3, [r4, #16]
 8000d50:	b94b      	cbnz	r3, 8000d66 <__swsetup_r+0x7a>
 8000d52:	89a3      	ldrh	r3, [r4, #12]
 8000d54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d5c:	d003      	beq.n	8000d66 <__swsetup_r+0x7a>
 8000d5e:	4621      	mov	r1, r4
 8000d60:	4628      	mov	r0, r5
 8000d62:	f000 fa5f 	bl	8001224 <__smakebuf_r>
 8000d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d6a:	f013 0201 	ands.w	r2, r3, #1
 8000d6e:	d00a      	beq.n	8000d86 <__swsetup_r+0x9a>
 8000d70:	2200      	movs	r2, #0
 8000d72:	60a2      	str	r2, [r4, #8]
 8000d74:	6962      	ldr	r2, [r4, #20]
 8000d76:	4252      	negs	r2, r2
 8000d78:	61a2      	str	r2, [r4, #24]
 8000d7a:	6922      	ldr	r2, [r4, #16]
 8000d7c:	b942      	cbnz	r2, 8000d90 <__swsetup_r+0xa4>
 8000d7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000d82:	d1c5      	bne.n	8000d10 <__swsetup_r+0x24>
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	0799      	lsls	r1, r3, #30
 8000d88:	bf58      	it	pl
 8000d8a:	6962      	ldrpl	r2, [r4, #20]
 8000d8c:	60a2      	str	r2, [r4, #8]
 8000d8e:	e7f4      	b.n	8000d7a <__swsetup_r+0x8e>
 8000d90:	2000      	movs	r0, #0
 8000d92:	e7f7      	b.n	8000d84 <__swsetup_r+0x98>
 8000d94:	20000010 	.word	0x20000010

08000d98 <memset>:
 8000d98:	4402      	add	r2, r0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d100      	bne.n	8000da2 <memset+0xa>
 8000da0:	4770      	bx	lr
 8000da2:	f803 1b01 	strb.w	r1, [r3], #1
 8000da6:	e7f9      	b.n	8000d9c <memset+0x4>

08000da8 <_close_r>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	4d06      	ldr	r5, [pc, #24]	@ (8000dc4 <_close_r+0x1c>)
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	4608      	mov	r0, r1
 8000db2:	602b      	str	r3, [r5, #0]
 8000db4:	f7ff fd63 	bl	800087e <_close>
 8000db8:	1c43      	adds	r3, r0, #1
 8000dba:	d102      	bne.n	8000dc2 <_close_r+0x1a>
 8000dbc:	682b      	ldr	r3, [r5, #0]
 8000dbe:	b103      	cbz	r3, 8000dc2 <_close_r+0x1a>
 8000dc0:	6023      	str	r3, [r4, #0]
 8000dc2:	bd38      	pop	{r3, r4, r5, pc}
 8000dc4:	20000210 	.word	0x20000210

08000dc8 <_lseek_r>:
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	4d07      	ldr	r5, [pc, #28]	@ (8000de8 <_lseek_r+0x20>)
 8000dcc:	4604      	mov	r4, r0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	602a      	str	r2, [r5, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	f7ff fd78 	bl	80008cc <_lseek>
 8000ddc:	1c43      	adds	r3, r0, #1
 8000dde:	d102      	bne.n	8000de6 <_lseek_r+0x1e>
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	b103      	cbz	r3, 8000de6 <_lseek_r+0x1e>
 8000de4:	6023      	str	r3, [r4, #0]
 8000de6:	bd38      	pop	{r3, r4, r5, pc}
 8000de8:	20000210 	.word	0x20000210

08000dec <_read_r>:
 8000dec:	b538      	push	{r3, r4, r5, lr}
 8000dee:	4d07      	ldr	r5, [pc, #28]	@ (8000e0c <_read_r+0x20>)
 8000df0:	4604      	mov	r4, r0
 8000df2:	4608      	mov	r0, r1
 8000df4:	4611      	mov	r1, r2
 8000df6:	2200      	movs	r2, #0
 8000df8:	602a      	str	r2, [r5, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	f7ff fd06 	bl	800080c <_read>
 8000e00:	1c43      	adds	r3, r0, #1
 8000e02:	d102      	bne.n	8000e0a <_read_r+0x1e>
 8000e04:	682b      	ldr	r3, [r5, #0]
 8000e06:	b103      	cbz	r3, 8000e0a <_read_r+0x1e>
 8000e08:	6023      	str	r3, [r4, #0]
 8000e0a:	bd38      	pop	{r3, r4, r5, pc}
 8000e0c:	20000210 	.word	0x20000210

08000e10 <_write_r>:
 8000e10:	b538      	push	{r3, r4, r5, lr}
 8000e12:	4d07      	ldr	r5, [pc, #28]	@ (8000e30 <_write_r+0x20>)
 8000e14:	4604      	mov	r4, r0
 8000e16:	4608      	mov	r0, r1
 8000e18:	4611      	mov	r1, r2
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	602a      	str	r2, [r5, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f7ff fd11 	bl	8000846 <_write>
 8000e24:	1c43      	adds	r3, r0, #1
 8000e26:	d102      	bne.n	8000e2e <_write_r+0x1e>
 8000e28:	682b      	ldr	r3, [r5, #0]
 8000e2a:	b103      	cbz	r3, 8000e2e <_write_r+0x1e>
 8000e2c:	6023      	str	r3, [r4, #0]
 8000e2e:	bd38      	pop	{r3, r4, r5, pc}
 8000e30:	20000210 	.word	0x20000210

08000e34 <__errno>:
 8000e34:	4b01      	ldr	r3, [pc, #4]	@ (8000e3c <__errno+0x8>)
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000010 	.word	0x20000010

08000e40 <__libc_init_array>:
 8000e40:	b570      	push	{r4, r5, r6, lr}
 8000e42:	4d0d      	ldr	r5, [pc, #52]	@ (8000e78 <__libc_init_array+0x38>)
 8000e44:	4c0d      	ldr	r4, [pc, #52]	@ (8000e7c <__libc_init_array+0x3c>)
 8000e46:	1b64      	subs	r4, r4, r5
 8000e48:	10a4      	asrs	r4, r4, #2
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	42a6      	cmp	r6, r4
 8000e4e:	d109      	bne.n	8000e64 <__libc_init_array+0x24>
 8000e50:	4d0b      	ldr	r5, [pc, #44]	@ (8000e80 <__libc_init_array+0x40>)
 8000e52:	4c0c      	ldr	r4, [pc, #48]	@ (8000e84 <__libc_init_array+0x44>)
 8000e54:	f000 fa54 	bl	8001300 <_init>
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	10a4      	asrs	r4, r4, #2
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	42a6      	cmp	r6, r4
 8000e60:	d105      	bne.n	8000e6e <__libc_init_array+0x2e>
 8000e62:	bd70      	pop	{r4, r5, r6, pc}
 8000e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e68:	4798      	blx	r3
 8000e6a:	3601      	adds	r6, #1
 8000e6c:	e7ee      	b.n	8000e4c <__libc_init_array+0xc>
 8000e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e72:	4798      	blx	r3
 8000e74:	3601      	adds	r6, #1
 8000e76:	e7f2      	b.n	8000e5e <__libc_init_array+0x1e>
 8000e78:	08001360 	.word	0x08001360
 8000e7c:	08001360 	.word	0x08001360
 8000e80:	08001360 	.word	0x08001360
 8000e84:	08001364 	.word	0x08001364

08000e88 <__retarget_lock_init_recursive>:
 8000e88:	4770      	bx	lr

08000e8a <__retarget_lock_acquire_recursive>:
 8000e8a:	4770      	bx	lr

08000e8c <__retarget_lock_release_recursive>:
 8000e8c:	4770      	bx	lr
	...

08000e90 <_free_r>:
 8000e90:	b538      	push	{r3, r4, r5, lr}
 8000e92:	4605      	mov	r5, r0
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d041      	beq.n	8000f1c <_free_r+0x8c>
 8000e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e9c:	1f0c      	subs	r4, r1, #4
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bfb8      	it	lt
 8000ea2:	18e4      	addlt	r4, r4, r3
 8000ea4:	f000 f8e0 	bl	8001068 <__malloc_lock>
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f20 <_free_r+0x90>)
 8000eaa:	6813      	ldr	r3, [r2, #0]
 8000eac:	b933      	cbnz	r3, 8000ebc <_free_r+0x2c>
 8000eae:	6063      	str	r3, [r4, #4]
 8000eb0:	6014      	str	r4, [r2, #0]
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eb8:	f000 b8dc 	b.w	8001074 <__malloc_unlock>
 8000ebc:	42a3      	cmp	r3, r4
 8000ebe:	d908      	bls.n	8000ed2 <_free_r+0x42>
 8000ec0:	6820      	ldr	r0, [r4, #0]
 8000ec2:	1821      	adds	r1, r4, r0
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf01      	itttt	eq
 8000ec8:	6819      	ldreq	r1, [r3, #0]
 8000eca:	685b      	ldreq	r3, [r3, #4]
 8000ecc:	1809      	addeq	r1, r1, r0
 8000ece:	6021      	streq	r1, [r4, #0]
 8000ed0:	e7ed      	b.n	8000eae <_free_r+0x1e>
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	b10b      	cbz	r3, 8000edc <_free_r+0x4c>
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d9fa      	bls.n	8000ed2 <_free_r+0x42>
 8000edc:	6811      	ldr	r1, [r2, #0]
 8000ede:	1850      	adds	r0, r2, r1
 8000ee0:	42a0      	cmp	r0, r4
 8000ee2:	d10b      	bne.n	8000efc <_free_r+0x6c>
 8000ee4:	6820      	ldr	r0, [r4, #0]
 8000ee6:	4401      	add	r1, r0
 8000ee8:	1850      	adds	r0, r2, r1
 8000eea:	4283      	cmp	r3, r0
 8000eec:	6011      	str	r1, [r2, #0]
 8000eee:	d1e0      	bne.n	8000eb2 <_free_r+0x22>
 8000ef0:	6818      	ldr	r0, [r3, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	6053      	str	r3, [r2, #4]
 8000ef6:	4408      	add	r0, r1
 8000ef8:	6010      	str	r0, [r2, #0]
 8000efa:	e7da      	b.n	8000eb2 <_free_r+0x22>
 8000efc:	d902      	bls.n	8000f04 <_free_r+0x74>
 8000efe:	230c      	movs	r3, #12
 8000f00:	602b      	str	r3, [r5, #0]
 8000f02:	e7d6      	b.n	8000eb2 <_free_r+0x22>
 8000f04:	6820      	ldr	r0, [r4, #0]
 8000f06:	1821      	adds	r1, r4, r0
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	bf04      	itt	eq
 8000f0c:	6819      	ldreq	r1, [r3, #0]
 8000f0e:	685b      	ldreq	r3, [r3, #4]
 8000f10:	6063      	str	r3, [r4, #4]
 8000f12:	bf04      	itt	eq
 8000f14:	1809      	addeq	r1, r1, r0
 8000f16:	6021      	streq	r1, [r4, #0]
 8000f18:	6054      	str	r4, [r2, #4]
 8000f1a:	e7ca      	b.n	8000eb2 <_free_r+0x22>
 8000f1c:	bd38      	pop	{r3, r4, r5, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000021c 	.word	0x2000021c

08000f24 <sbrk_aligned>:
 8000f24:	b570      	push	{r4, r5, r6, lr}
 8000f26:	4e0f      	ldr	r6, [pc, #60]	@ (8000f64 <sbrk_aligned+0x40>)
 8000f28:	460c      	mov	r4, r1
 8000f2a:	6831      	ldr	r1, [r6, #0]
 8000f2c:	4605      	mov	r5, r0
 8000f2e:	b911      	cbnz	r1, 8000f36 <sbrk_aligned+0x12>
 8000f30:	f000 f9d6 	bl	80012e0 <_sbrk_r>
 8000f34:	6030      	str	r0, [r6, #0]
 8000f36:	4621      	mov	r1, r4
 8000f38:	4628      	mov	r0, r5
 8000f3a:	f000 f9d1 	bl	80012e0 <_sbrk_r>
 8000f3e:	1c43      	adds	r3, r0, #1
 8000f40:	d103      	bne.n	8000f4a <sbrk_aligned+0x26>
 8000f42:	f04f 34ff 	mov.w	r4, #4294967295
 8000f46:	4620      	mov	r0, r4
 8000f48:	bd70      	pop	{r4, r5, r6, pc}
 8000f4a:	1cc4      	adds	r4, r0, #3
 8000f4c:	f024 0403 	bic.w	r4, r4, #3
 8000f50:	42a0      	cmp	r0, r4
 8000f52:	d0f8      	beq.n	8000f46 <sbrk_aligned+0x22>
 8000f54:	1a21      	subs	r1, r4, r0
 8000f56:	4628      	mov	r0, r5
 8000f58:	f000 f9c2 	bl	80012e0 <_sbrk_r>
 8000f5c:	3001      	adds	r0, #1
 8000f5e:	d1f2      	bne.n	8000f46 <sbrk_aligned+0x22>
 8000f60:	e7ef      	b.n	8000f42 <sbrk_aligned+0x1e>
 8000f62:	bf00      	nop
 8000f64:	20000218 	.word	0x20000218

08000f68 <_malloc_r>:
 8000f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f6c:	1ccd      	adds	r5, r1, #3
 8000f6e:	f025 0503 	bic.w	r5, r5, #3
 8000f72:	3508      	adds	r5, #8
 8000f74:	2d0c      	cmp	r5, #12
 8000f76:	bf38      	it	cc
 8000f78:	250c      	movcc	r5, #12
 8000f7a:	2d00      	cmp	r5, #0
 8000f7c:	4606      	mov	r6, r0
 8000f7e:	db01      	blt.n	8000f84 <_malloc_r+0x1c>
 8000f80:	42a9      	cmp	r1, r5
 8000f82:	d904      	bls.n	8000f8e <_malloc_r+0x26>
 8000f84:	230c      	movs	r3, #12
 8000f86:	6033      	str	r3, [r6, #0]
 8000f88:	2000      	movs	r0, #0
 8000f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001064 <_malloc_r+0xfc>
 8000f92:	f000 f869 	bl	8001068 <__malloc_lock>
 8000f96:	f8d8 3000 	ldr.w	r3, [r8]
 8000f9a:	461c      	mov	r4, r3
 8000f9c:	bb44      	cbnz	r4, 8000ff0 <_malloc_r+0x88>
 8000f9e:	4629      	mov	r1, r5
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	f7ff ffbf 	bl	8000f24 <sbrk_aligned>
 8000fa6:	1c43      	adds	r3, r0, #1
 8000fa8:	4604      	mov	r4, r0
 8000faa:	d158      	bne.n	800105e <_malloc_r+0xf6>
 8000fac:	f8d8 4000 	ldr.w	r4, [r8]
 8000fb0:	4627      	mov	r7, r4
 8000fb2:	2f00      	cmp	r7, #0
 8000fb4:	d143      	bne.n	800103e <_malloc_r+0xd6>
 8000fb6:	2c00      	cmp	r4, #0
 8000fb8:	d04b      	beq.n	8001052 <_malloc_r+0xea>
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	4639      	mov	r1, r7
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	eb04 0903 	add.w	r9, r4, r3
 8000fc4:	f000 f98c 	bl	80012e0 <_sbrk_r>
 8000fc8:	4581      	cmp	r9, r0
 8000fca:	d142      	bne.n	8001052 <_malloc_r+0xea>
 8000fcc:	6821      	ldr	r1, [r4, #0]
 8000fce:	1a6d      	subs	r5, r5, r1
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	f7ff ffa6 	bl	8000f24 <sbrk_aligned>
 8000fd8:	3001      	adds	r0, #1
 8000fda:	d03a      	beq.n	8001052 <_malloc_r+0xea>
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	442b      	add	r3, r5
 8000fe0:	6023      	str	r3, [r4, #0]
 8000fe2:	f8d8 3000 	ldr.w	r3, [r8]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	bb62      	cbnz	r2, 8001044 <_malloc_r+0xdc>
 8000fea:	f8c8 7000 	str.w	r7, [r8]
 8000fee:	e00f      	b.n	8001010 <_malloc_r+0xa8>
 8000ff0:	6822      	ldr	r2, [r4, #0]
 8000ff2:	1b52      	subs	r2, r2, r5
 8000ff4:	d420      	bmi.n	8001038 <_malloc_r+0xd0>
 8000ff6:	2a0b      	cmp	r2, #11
 8000ff8:	d917      	bls.n	800102a <_malloc_r+0xc2>
 8000ffa:	1961      	adds	r1, r4, r5
 8000ffc:	42a3      	cmp	r3, r4
 8000ffe:	6025      	str	r5, [r4, #0]
 8001000:	bf18      	it	ne
 8001002:	6059      	strne	r1, [r3, #4]
 8001004:	6863      	ldr	r3, [r4, #4]
 8001006:	bf08      	it	eq
 8001008:	f8c8 1000 	streq.w	r1, [r8]
 800100c:	5162      	str	r2, [r4, r5]
 800100e:	604b      	str	r3, [r1, #4]
 8001010:	4630      	mov	r0, r6
 8001012:	f000 f82f 	bl	8001074 <__malloc_unlock>
 8001016:	f104 000b 	add.w	r0, r4, #11
 800101a:	1d23      	adds	r3, r4, #4
 800101c:	f020 0007 	bic.w	r0, r0, #7
 8001020:	1ac2      	subs	r2, r0, r3
 8001022:	bf1c      	itt	ne
 8001024:	1a1b      	subne	r3, r3, r0
 8001026:	50a3      	strne	r3, [r4, r2]
 8001028:	e7af      	b.n	8000f8a <_malloc_r+0x22>
 800102a:	6862      	ldr	r2, [r4, #4]
 800102c:	42a3      	cmp	r3, r4
 800102e:	bf0c      	ite	eq
 8001030:	f8c8 2000 	streq.w	r2, [r8]
 8001034:	605a      	strne	r2, [r3, #4]
 8001036:	e7eb      	b.n	8001010 <_malloc_r+0xa8>
 8001038:	4623      	mov	r3, r4
 800103a:	6864      	ldr	r4, [r4, #4]
 800103c:	e7ae      	b.n	8000f9c <_malloc_r+0x34>
 800103e:	463c      	mov	r4, r7
 8001040:	687f      	ldr	r7, [r7, #4]
 8001042:	e7b6      	b.n	8000fb2 <_malloc_r+0x4a>
 8001044:	461a      	mov	r2, r3
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	42a3      	cmp	r3, r4
 800104a:	d1fb      	bne.n	8001044 <_malloc_r+0xdc>
 800104c:	2300      	movs	r3, #0
 800104e:	6053      	str	r3, [r2, #4]
 8001050:	e7de      	b.n	8001010 <_malloc_r+0xa8>
 8001052:	230c      	movs	r3, #12
 8001054:	6033      	str	r3, [r6, #0]
 8001056:	4630      	mov	r0, r6
 8001058:	f000 f80c 	bl	8001074 <__malloc_unlock>
 800105c:	e794      	b.n	8000f88 <_malloc_r+0x20>
 800105e:	6005      	str	r5, [r0, #0]
 8001060:	e7d6      	b.n	8001010 <_malloc_r+0xa8>
 8001062:	bf00      	nop
 8001064:	2000021c 	.word	0x2000021c

08001068 <__malloc_lock>:
 8001068:	4801      	ldr	r0, [pc, #4]	@ (8001070 <__malloc_lock+0x8>)
 800106a:	f7ff bf0e 	b.w	8000e8a <__retarget_lock_acquire_recursive>
 800106e:	bf00      	nop
 8001070:	20000214 	.word	0x20000214

08001074 <__malloc_unlock>:
 8001074:	4801      	ldr	r0, [pc, #4]	@ (800107c <__malloc_unlock+0x8>)
 8001076:	f7ff bf09 	b.w	8000e8c <__retarget_lock_release_recursive>
 800107a:	bf00      	nop
 800107c:	20000214 	.word	0x20000214

08001080 <__sflush_r>:
 8001080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001088:	0716      	lsls	r6, r2, #28
 800108a:	4605      	mov	r5, r0
 800108c:	460c      	mov	r4, r1
 800108e:	d454      	bmi.n	800113a <__sflush_r+0xba>
 8001090:	684b      	ldr	r3, [r1, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	dc02      	bgt.n	800109c <__sflush_r+0x1c>
 8001096:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001098:	2b00      	cmp	r3, #0
 800109a:	dd48      	ble.n	800112e <__sflush_r+0xae>
 800109c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d045      	beq.n	800112e <__sflush_r+0xae>
 80010a2:	2300      	movs	r3, #0
 80010a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80010a8:	682f      	ldr	r7, [r5, #0]
 80010aa:	6a21      	ldr	r1, [r4, #32]
 80010ac:	602b      	str	r3, [r5, #0]
 80010ae:	d030      	beq.n	8001112 <__sflush_r+0x92>
 80010b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80010b2:	89a3      	ldrh	r3, [r4, #12]
 80010b4:	0759      	lsls	r1, r3, #29
 80010b6:	d505      	bpl.n	80010c4 <__sflush_r+0x44>
 80010b8:	6863      	ldr	r3, [r4, #4]
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80010be:	b10b      	cbz	r3, 80010c4 <__sflush_r+0x44>
 80010c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	2300      	movs	r3, #0
 80010c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010c8:	6a21      	ldr	r1, [r4, #32]
 80010ca:	4628      	mov	r0, r5
 80010cc:	47b0      	blx	r6
 80010ce:	1c43      	adds	r3, r0, #1
 80010d0:	89a3      	ldrh	r3, [r4, #12]
 80010d2:	d106      	bne.n	80010e2 <__sflush_r+0x62>
 80010d4:	6829      	ldr	r1, [r5, #0]
 80010d6:	291d      	cmp	r1, #29
 80010d8:	d82b      	bhi.n	8001132 <__sflush_r+0xb2>
 80010da:	4a2a      	ldr	r2, [pc, #168]	@ (8001184 <__sflush_r+0x104>)
 80010dc:	410a      	asrs	r2, r1
 80010de:	07d6      	lsls	r6, r2, #31
 80010e0:	d427      	bmi.n	8001132 <__sflush_r+0xb2>
 80010e2:	2200      	movs	r2, #0
 80010e4:	6062      	str	r2, [r4, #4]
 80010e6:	04d9      	lsls	r1, r3, #19
 80010e8:	6922      	ldr	r2, [r4, #16]
 80010ea:	6022      	str	r2, [r4, #0]
 80010ec:	d504      	bpl.n	80010f8 <__sflush_r+0x78>
 80010ee:	1c42      	adds	r2, r0, #1
 80010f0:	d101      	bne.n	80010f6 <__sflush_r+0x76>
 80010f2:	682b      	ldr	r3, [r5, #0]
 80010f4:	b903      	cbnz	r3, 80010f8 <__sflush_r+0x78>
 80010f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80010f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010fa:	602f      	str	r7, [r5, #0]
 80010fc:	b1b9      	cbz	r1, 800112e <__sflush_r+0xae>
 80010fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001102:	4299      	cmp	r1, r3
 8001104:	d002      	beq.n	800110c <__sflush_r+0x8c>
 8001106:	4628      	mov	r0, r5
 8001108:	f7ff fec2 	bl	8000e90 <_free_r>
 800110c:	2300      	movs	r3, #0
 800110e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001110:	e00d      	b.n	800112e <__sflush_r+0xae>
 8001112:	2301      	movs	r3, #1
 8001114:	4628      	mov	r0, r5
 8001116:	47b0      	blx	r6
 8001118:	4602      	mov	r2, r0
 800111a:	1c50      	adds	r0, r2, #1
 800111c:	d1c9      	bne.n	80010b2 <__sflush_r+0x32>
 800111e:	682b      	ldr	r3, [r5, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0c6      	beq.n	80010b2 <__sflush_r+0x32>
 8001124:	2b1d      	cmp	r3, #29
 8001126:	d001      	beq.n	800112c <__sflush_r+0xac>
 8001128:	2b16      	cmp	r3, #22
 800112a:	d11e      	bne.n	800116a <__sflush_r+0xea>
 800112c:	602f      	str	r7, [r5, #0]
 800112e:	2000      	movs	r0, #0
 8001130:	e022      	b.n	8001178 <__sflush_r+0xf8>
 8001132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001136:	b21b      	sxth	r3, r3
 8001138:	e01b      	b.n	8001172 <__sflush_r+0xf2>
 800113a:	690f      	ldr	r7, [r1, #16]
 800113c:	2f00      	cmp	r7, #0
 800113e:	d0f6      	beq.n	800112e <__sflush_r+0xae>
 8001140:	0793      	lsls	r3, r2, #30
 8001142:	680e      	ldr	r6, [r1, #0]
 8001144:	bf08      	it	eq
 8001146:	694b      	ldreq	r3, [r1, #20]
 8001148:	600f      	str	r7, [r1, #0]
 800114a:	bf18      	it	ne
 800114c:	2300      	movne	r3, #0
 800114e:	eba6 0807 	sub.w	r8, r6, r7
 8001152:	608b      	str	r3, [r1, #8]
 8001154:	f1b8 0f00 	cmp.w	r8, #0
 8001158:	dde9      	ble.n	800112e <__sflush_r+0xae>
 800115a:	6a21      	ldr	r1, [r4, #32]
 800115c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800115e:	4643      	mov	r3, r8
 8001160:	463a      	mov	r2, r7
 8001162:	4628      	mov	r0, r5
 8001164:	47b0      	blx	r6
 8001166:	2800      	cmp	r0, #0
 8001168:	dc08      	bgt.n	800117c <__sflush_r+0xfc>
 800116a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800116e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001172:	81a3      	strh	r3, [r4, #12]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800117c:	4407      	add	r7, r0
 800117e:	eba8 0800 	sub.w	r8, r8, r0
 8001182:	e7e7      	b.n	8001154 <__sflush_r+0xd4>
 8001184:	dfbffffe 	.word	0xdfbffffe

08001188 <_fflush_r>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	690b      	ldr	r3, [r1, #16]
 800118c:	4605      	mov	r5, r0
 800118e:	460c      	mov	r4, r1
 8001190:	b913      	cbnz	r3, 8001198 <_fflush_r+0x10>
 8001192:	2500      	movs	r5, #0
 8001194:	4628      	mov	r0, r5
 8001196:	bd38      	pop	{r3, r4, r5, pc}
 8001198:	b118      	cbz	r0, 80011a2 <_fflush_r+0x1a>
 800119a:	6a03      	ldr	r3, [r0, #32]
 800119c:	b90b      	cbnz	r3, 80011a2 <_fflush_r+0x1a>
 800119e:	f7ff fc8f 	bl	8000ac0 <__sinit>
 80011a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f3      	beq.n	8001192 <_fflush_r+0xa>
 80011aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80011ac:	07d0      	lsls	r0, r2, #31
 80011ae:	d404      	bmi.n	80011ba <_fflush_r+0x32>
 80011b0:	0599      	lsls	r1, r3, #22
 80011b2:	d402      	bmi.n	80011ba <_fflush_r+0x32>
 80011b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011b6:	f7ff fe68 	bl	8000e8a <__retarget_lock_acquire_recursive>
 80011ba:	4628      	mov	r0, r5
 80011bc:	4621      	mov	r1, r4
 80011be:	f7ff ff5f 	bl	8001080 <__sflush_r>
 80011c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80011c4:	07da      	lsls	r2, r3, #31
 80011c6:	4605      	mov	r5, r0
 80011c8:	d4e4      	bmi.n	8001194 <_fflush_r+0xc>
 80011ca:	89a3      	ldrh	r3, [r4, #12]
 80011cc:	059b      	lsls	r3, r3, #22
 80011ce:	d4e1      	bmi.n	8001194 <_fflush_r+0xc>
 80011d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011d2:	f7ff fe5b 	bl	8000e8c <__retarget_lock_release_recursive>
 80011d6:	e7dd      	b.n	8001194 <_fflush_r+0xc>

080011d8 <__swhatbuf_r>:
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	460c      	mov	r4, r1
 80011dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011e0:	2900      	cmp	r1, #0
 80011e2:	b096      	sub	sp, #88	@ 0x58
 80011e4:	4615      	mov	r5, r2
 80011e6:	461e      	mov	r6, r3
 80011e8:	da0d      	bge.n	8001206 <__swhatbuf_r+0x2e>
 80011ea:	89a3      	ldrh	r3, [r4, #12]
 80011ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80011f0:	f04f 0100 	mov.w	r1, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2340      	movne	r3, #64	@ 0x40
 80011f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80011fc:	2000      	movs	r0, #0
 80011fe:	6031      	str	r1, [r6, #0]
 8001200:	602b      	str	r3, [r5, #0]
 8001202:	b016      	add	sp, #88	@ 0x58
 8001204:	bd70      	pop	{r4, r5, r6, pc}
 8001206:	466a      	mov	r2, sp
 8001208:	f000 f848 	bl	800129c <_fstat_r>
 800120c:	2800      	cmp	r0, #0
 800120e:	dbec      	blt.n	80011ea <__swhatbuf_r+0x12>
 8001210:	9901      	ldr	r1, [sp, #4]
 8001212:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001216:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800121a:	4259      	negs	r1, r3
 800121c:	4159      	adcs	r1, r3
 800121e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001222:	e7eb      	b.n	80011fc <__swhatbuf_r+0x24>

08001224 <__smakebuf_r>:
 8001224:	898b      	ldrh	r3, [r1, #12]
 8001226:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001228:	079d      	lsls	r5, r3, #30
 800122a:	4606      	mov	r6, r0
 800122c:	460c      	mov	r4, r1
 800122e:	d507      	bpl.n	8001240 <__smakebuf_r+0x1c>
 8001230:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001234:	6023      	str	r3, [r4, #0]
 8001236:	6123      	str	r3, [r4, #16]
 8001238:	2301      	movs	r3, #1
 800123a:	6163      	str	r3, [r4, #20]
 800123c:	b003      	add	sp, #12
 800123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001240:	ab01      	add	r3, sp, #4
 8001242:	466a      	mov	r2, sp
 8001244:	f7ff ffc8 	bl	80011d8 <__swhatbuf_r>
 8001248:	9f00      	ldr	r7, [sp, #0]
 800124a:	4605      	mov	r5, r0
 800124c:	4639      	mov	r1, r7
 800124e:	4630      	mov	r0, r6
 8001250:	f7ff fe8a 	bl	8000f68 <_malloc_r>
 8001254:	b948      	cbnz	r0, 800126a <__smakebuf_r+0x46>
 8001256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800125a:	059a      	lsls	r2, r3, #22
 800125c:	d4ee      	bmi.n	800123c <__smakebuf_r+0x18>
 800125e:	f023 0303 	bic.w	r3, r3, #3
 8001262:	f043 0302 	orr.w	r3, r3, #2
 8001266:	81a3      	strh	r3, [r4, #12]
 8001268:	e7e2      	b.n	8001230 <__smakebuf_r+0xc>
 800126a:	89a3      	ldrh	r3, [r4, #12]
 800126c:	6020      	str	r0, [r4, #0]
 800126e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001272:	81a3      	strh	r3, [r4, #12]
 8001274:	9b01      	ldr	r3, [sp, #4]
 8001276:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800127a:	b15b      	cbz	r3, 8001294 <__smakebuf_r+0x70>
 800127c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001280:	4630      	mov	r0, r6
 8001282:	f000 f81d 	bl	80012c0 <_isatty_r>
 8001286:	b128      	cbz	r0, 8001294 <__smakebuf_r+0x70>
 8001288:	89a3      	ldrh	r3, [r4, #12]
 800128a:	f023 0303 	bic.w	r3, r3, #3
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	81a3      	strh	r3, [r4, #12]
 8001294:	89a3      	ldrh	r3, [r4, #12]
 8001296:	431d      	orrs	r5, r3
 8001298:	81a5      	strh	r5, [r4, #12]
 800129a:	e7cf      	b.n	800123c <__smakebuf_r+0x18>

0800129c <_fstat_r>:
 800129c:	b538      	push	{r3, r4, r5, lr}
 800129e:	4d07      	ldr	r5, [pc, #28]	@ (80012bc <_fstat_r+0x20>)
 80012a0:	2300      	movs	r3, #0
 80012a2:	4604      	mov	r4, r0
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	602b      	str	r3, [r5, #0]
 80012aa:	f7ff faf4 	bl	8000896 <_fstat>
 80012ae:	1c43      	adds	r3, r0, #1
 80012b0:	d102      	bne.n	80012b8 <_fstat_r+0x1c>
 80012b2:	682b      	ldr	r3, [r5, #0]
 80012b4:	b103      	cbz	r3, 80012b8 <_fstat_r+0x1c>
 80012b6:	6023      	str	r3, [r4, #0]
 80012b8:	bd38      	pop	{r3, r4, r5, pc}
 80012ba:	bf00      	nop
 80012bc:	20000210 	.word	0x20000210

080012c0 <_isatty_r>:
 80012c0:	b538      	push	{r3, r4, r5, lr}
 80012c2:	4d06      	ldr	r5, [pc, #24]	@ (80012dc <_isatty_r+0x1c>)
 80012c4:	2300      	movs	r3, #0
 80012c6:	4604      	mov	r4, r0
 80012c8:	4608      	mov	r0, r1
 80012ca:	602b      	str	r3, [r5, #0]
 80012cc:	f7ff faf3 	bl	80008b6 <_isatty>
 80012d0:	1c43      	adds	r3, r0, #1
 80012d2:	d102      	bne.n	80012da <_isatty_r+0x1a>
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	b103      	cbz	r3, 80012da <_isatty_r+0x1a>
 80012d8:	6023      	str	r3, [r4, #0]
 80012da:	bd38      	pop	{r3, r4, r5, pc}
 80012dc:	20000210 	.word	0x20000210

080012e0 <_sbrk_r>:
 80012e0:	b538      	push	{r3, r4, r5, lr}
 80012e2:	4d06      	ldr	r5, [pc, #24]	@ (80012fc <_sbrk_r+0x1c>)
 80012e4:	2300      	movs	r3, #0
 80012e6:	4604      	mov	r4, r0
 80012e8:	4608      	mov	r0, r1
 80012ea:	602b      	str	r3, [r5, #0]
 80012ec:	f7ff fafc 	bl	80008e8 <_sbrk>
 80012f0:	1c43      	adds	r3, r0, #1
 80012f2:	d102      	bne.n	80012fa <_sbrk_r+0x1a>
 80012f4:	682b      	ldr	r3, [r5, #0]
 80012f6:	b103      	cbz	r3, 80012fa <_sbrk_r+0x1a>
 80012f8:	6023      	str	r3, [r4, #0]
 80012fa:	bd38      	pop	{r3, r4, r5, pc}
 80012fc:	20000210 	.word	0x20000210

08001300 <_init>:
 8001300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001302:	bf00      	nop
 8001304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001306:	bc08      	pop	{r3}
 8001308:	469e      	mov	lr, r3
 800130a:	4770      	bx	lr

0800130c <_fini>:
 800130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130e:	bf00      	nop
 8001310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001312:	bc08      	pop	{r3}
 8001314:	469e      	mov	lr, r3
 8001316:	4770      	bx	lr
